{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation for rcdesign \u00b6 rcdesign is a Python package for analysis of reinforced concrete (RC) sections as per the limit state method (LSM) of IS 456:2000 - the code of practice for plain and reinforced concrete in India. Current Status \u00b6 The package is in early development and may undergo backward incompatible changes. It has undergone testing of the current code base. Limited examples have been solved and verified by hand. Test coverage is currently 100% (excepting the example script). What rcdesign can and cannot do \u00b6 At present rcdesign can do the following: Represent stress strain relationship for: concrete in flexure as per IS 456:2000 (38.1), concrete under axial compression and flexure as per IS 456:2000 (39.1), reinforcement bars: mild steel bars with well defined yield point cold worked deformed bars Represent layers of reinforcement bars placed parallel to the edge of the section at a given distance from the compression (or tension edge). Bars can be of different diameters but must be of the same type. Represent group of layers of reinforcement bars. All bars in a group must be of the same type, although their diameters may differ, and layers of reinforcement must be placed parallel to the short edge b of the section. Represent group of shear reinforcement in the form of vertical stirrups, inclined stirrups and bent-up bars. Analyse reinforced concrete rectangular and flanged sections subjected to bending and shear as per the Limit State Method according to IS 456:2000, the Indian standard code of practice for plain and reinforced concrete. This calculates the ultimate strength of the section in bending and shear depending on the materials, section size and main (longitudinal) and shear reinforcement. Analyses reinforced concrete rectangular sections subjected to axial compression and bending about one axis parallel to the first (usually the short) edge, as per limit state method of IS 456:2000. Rectangular and flanged sections must be of a given grade of concrete. Main (longitudinal) reinforcement to resist bending must be provided as a single group of reinforcement layers, arranged in one or more layers. Depending on their distance from the compression edge, the layers of rebars may lie in the tension and/or compression zone of the section.However, since the position of the neutral axis is dependent on the section size and the amount and location of main reinforcement, whether a layer of reinforcement lies in the tension zone or the compression zone will be known only after an analysis of the section. At present, rcdesign cannot do the following: Cannot design sections, either for bending, shear and torsion or for axial compression with or without bending about one or both axes. Cannot verify whether the section meets the detailing requirements of IS 456:2000 (26). Cannot analyse or design sections as per Working Stress Method of IS 456:2000 (Annexure N). Cannot design reinforced concrete elements such as beams and columns. At present, the scope of the package is restricted to analysis and design of sections of beams and columns. Design of sections is a distant goal, but no promises. Some or all of the above features will be gradually added. Contributions in accomplishing this are welcome. Contribute \u00b6 Contributions are welcome. Contributions can be in a variety of forms: Bug reports Additional features Documentation Additional examples Links \u00b6 Documentation: Documentation PyPI release: 0.4.14 Github repository: https://github.com/satish-annigeri/rcdesign Documentation \u00b6 Documentation is available here . Any advise or help on documentation is welcome. Future Plans \u00b6 Immediate plans include the design of sections : Design of rectangular and flanged sections subjected to bending, shear and torsion. Write user and API documentation using Sphinx. Design of rectangular column sections . Detailing of rectangular beam sections subjected to bending, shear and torsion. Design of rectangular column sections subjected to combined axial compression and bending. Implementing a stress block to represent working stress method . Long term plans include: Design and detailing of reinforced concrete elements such as beams, columns, slabs, footings, retaining walls etc. Calculation of deflections of elements. Design and detailing of reinforced concrete structures, including detailing of joints (very far into the future, if at all). References \u00b6 IS 456:2000 Indian Standard Code of Practice for Plain and Reinforced Concrete (Fourth Revision), Bureau of Indian Standards, New Delhi, 2000. SP:24 (S&T)-1983 Explanatory Handbook on Indian Standard Code of Practice for Plain and Reinforced Concrete (IS 456:1978), Bureau of Indian Standards, New Delhi, 1984. SP 16:1980 Design Aids for Reinforced Concrete to IS:456-1978, Bureau of Indian Standards, New Delhi, 1980.","title":"Home"},{"location":"#documentation-for-rcdesign","text":"rcdesign is a Python package for analysis of reinforced concrete (RC) sections as per the limit state method (LSM) of IS 456:2000 - the code of practice for plain and reinforced concrete in India.","title":"Documentation for rcdesign"},{"location":"#current-status","text":"The package is in early development and may undergo backward incompatible changes. It has undergone testing of the current code base. Limited examples have been solved and verified by hand. Test coverage is currently 100% (excepting the example script).","title":"Current Status"},{"location":"#what-rcdesign-can-and-cannot-do","text":"At present rcdesign can do the following: Represent stress strain relationship for: concrete in flexure as per IS 456:2000 (38.1), concrete under axial compression and flexure as per IS 456:2000 (39.1), reinforcement bars: mild steel bars with well defined yield point cold worked deformed bars Represent layers of reinforcement bars placed parallel to the edge of the section at a given distance from the compression (or tension edge). Bars can be of different diameters but must be of the same type. Represent group of layers of reinforcement bars. All bars in a group must be of the same type, although their diameters may differ, and layers of reinforcement must be placed parallel to the short edge b of the section. Represent group of shear reinforcement in the form of vertical stirrups, inclined stirrups and bent-up bars. Analyse reinforced concrete rectangular and flanged sections subjected to bending and shear as per the Limit State Method according to IS 456:2000, the Indian standard code of practice for plain and reinforced concrete. This calculates the ultimate strength of the section in bending and shear depending on the materials, section size and main (longitudinal) and shear reinforcement. Analyses reinforced concrete rectangular sections subjected to axial compression and bending about one axis parallel to the first (usually the short) edge, as per limit state method of IS 456:2000. Rectangular and flanged sections must be of a given grade of concrete. Main (longitudinal) reinforcement to resist bending must be provided as a single group of reinforcement layers, arranged in one or more layers. Depending on their distance from the compression edge, the layers of rebars may lie in the tension and/or compression zone of the section.However, since the position of the neutral axis is dependent on the section size and the amount and location of main reinforcement, whether a layer of reinforcement lies in the tension zone or the compression zone will be known only after an analysis of the section. At present, rcdesign cannot do the following: Cannot design sections, either for bending, shear and torsion or for axial compression with or without bending about one or both axes. Cannot verify whether the section meets the detailing requirements of IS 456:2000 (26). Cannot analyse or design sections as per Working Stress Method of IS 456:2000 (Annexure N). Cannot design reinforced concrete elements such as beams and columns. At present, the scope of the package is restricted to analysis and design of sections of beams and columns. Design of sections is a distant goal, but no promises. Some or all of the above features will be gradually added. Contributions in accomplishing this are welcome.","title":"What rcdesign can and cannot do"},{"location":"#contribute","text":"Contributions are welcome. Contributions can be in a variety of forms: Bug reports Additional features Documentation Additional examples","title":"Contribute"},{"location":"#links","text":"Documentation: Documentation PyPI release: 0.4.14 Github repository: https://github.com/satish-annigeri/rcdesign","title":"Links"},{"location":"#documentation","text":"Documentation is available here . Any advise or help on documentation is welcome.","title":"Documentation"},{"location":"#future-plans","text":"Immediate plans include the design of sections : Design of rectangular and flanged sections subjected to bending, shear and torsion. Write user and API documentation using Sphinx. Design of rectangular column sections . Detailing of rectangular beam sections subjected to bending, shear and torsion. Design of rectangular column sections subjected to combined axial compression and bending. Implementing a stress block to represent working stress method . Long term plans include: Design and detailing of reinforced concrete elements such as beams, columns, slabs, footings, retaining walls etc. Calculation of deflections of elements. Design and detailing of reinforced concrete structures, including detailing of joints (very far into the future, if at all).","title":"Future Plans"},{"location":"#references","text":"IS 456:2000 Indian Standard Code of Practice for Plain and Reinforced Concrete (Fourth Revision), Bureau of Indian Standards, New Delhi, 2000. SP:24 (S&T)-1983 Explanatory Handbook on Indian Standard Code of Practice for Plain and Reinforced Concrete (IS 456:1978), Bureau of Indian Standards, New Delhi, 1984. SP 16:1980 Design Aids for Reinforced Concrete to IS:456-1978, Bureau of Indian Standards, New Delhi, 1980.","title":"References"},{"location":"api/","text":"API Reference \u00b6 Materials \u00b6 Concrete \u00b6 Concrete dataclass \u00b6 Concrete Returns \u00b6 Concrete Concrete object Source code in rcdesign\\is456\\concrete.py @dataclass class Concrete: \"\"\"Concrete Returns ------- Concrete Concrete object \"\"\" label: str fck: float gamma_m: float = 1.5 density: float = 25.0 def __repr__(self) -> str: s = f\"fck = {self.fck:.2f} N/mm^2, fd = {self.fd:.2f} N/mm^2\" return s @property def Ec(self) -> float: return 5000 * sqrt(self.fck) @property def fd(self) -> float: return 0.67 * self.fck / self.gamma_m def tauc(self, pt: float) -> float: if pt < 0.15: pt = 0.15 if pt > 3: pt = 3.0 beta = max(1.0, (0.8 * self.fck) / (6.89 * pt)) num = 0.85 * sqrt(0.8 * self.fck) * (sqrt(1 + 5 * beta) - 1) den = 6 * beta return num / den def tauc_max(self): tauc = np.array([[15, 20, 25, 30, 35, 40], [2.5, 2.8, 3.1, 3.5, 3.7, 4.0]]) if self.fck < 15: return 0.0 elif self.fck >= tauc[0, -1]: return tauc[1, -1] else: for i in range(1, tauc.shape[1]): if self.fck <= tauc[0, i]: if self.fck == tauc[0, i]: return tauc[1, i] else: x1 = tauc[0, i - 1] y1 = tauc[1, i - 1] x2 = tauc[0, i] y2 = tauc[1, i] print(x1, x2, y1, y2) return y1 + (y2 - y1) / (x2 - x1) * (self.fck - x1) Rebar \u00b6 Classes to represent reinforcement bars, layers of reinforcement bars and groups of reinforcement layers Rebar dataclass \u00b6 Bases: ABC Rebar object represents a reinforcment bar. Parameters \u00b6 type description Returns \u00b6 Rebar description Source code in rcdesign\\is456\\rebar.py @dataclass class Rebar(ABC): # pragma: no cover \"\"\"Rebar object represents a reinforcment bar. Parameters ---------- ABC : _type_ _description_ Returns ------- Rebar _description_ \"\"\" label: str fy: float gamma_m: float = 1.15 density: float = 78.5 Es: float = 2e5 rebar_type: RebarType = RebarType.REBAR_HYSD @property def fd(self) -> float: return self.fy / self.gamma_m def es_min(self) -> float: return self.fd / self.Es + 0.002 @abstractmethod def fs(self, es: float) -> float: pass Section \u00b6 Class to represent reinforced concrete cross sections DesignForceType \u00b6 Bases: Enum DesignForceType object is an enumeration Source code in rcdesign\\is456\\section.py class DesignForceType(Enum): \"\"\"DesignForceType object is an enumeration \"\"\" BEAM = 1 COLUMN = 2 SLAB = 3 SHEARWALL = 4 RectBeamSection dataclass \u00b6 RectBeamSection object represnts a rectangular beam section subjected to bending and shear. Returns \u00b6 RectBeamSection description Source code in rcdesign\\is456\\section.py @dataclass class RectBeamSection: \"\"\"RectBeamSection object represnts a rectangular beam section subjected to bending and shear. Returns ------- RectBeamSection _description_ \"\"\" b: float D: float csb: LSMStressBlock conc: Concrete long_steel: RebarGroup shear_steel: ShearRebarGroup clear_cover: float def __post_init__(self): self.design_force_type = DesignForceType.BEAM self.calc_xc() def calc_xc(self) -> None: self.long_steel.calc_xc(self.D) return None def calc_stress_type(self, xu: float) -> None: self.calc_xc() self.long_steel.calc_stress_type(xu) def C(self, xu: float, ecmax: float = ecu) -> Tuple[float, float]: Fc, Mc, _, _ = self.F_M(xu, ecmax) return Fc, Mc def T(self, xu: float, ecmax: float) -> Tuple[float, float]: _, _, Ft, Mt = self.F_M(xu, ecmax) return Ft, Mt def C_T(self, xu: float, ecmax: float = ecu) -> float: self.calc_stress_type(xu) C, _, T, _ = self.F_M(xu, ecmax) return C - T def F_M(self, xu: float, ecmax: float = ecu) -> Tuple[float, float, float, float]: # sb = LSMStressBlock(\"LSM Flexure\") self.calc_stress_type(xu) Fc = Mc = Ft = Mt = 0.0 # Compression force - concrete k = xu / self.D Fcc = self.csb.C(0, k, k, ecmax) * self.conc.fd * self.b * self.D Mcc = self.csb.M(0, k, k, ecmax) * self.conc.fd * self.b * self.D**2 # Compression force - compression steel Fsc, Msc, Fst, Mst = self.long_steel.force_moment( xu, self.csb, self.conc, ecmax ) # Tension force in tension steel Ft, Mt = self.long_steel.force_tension(xu, ecmax) Fc = Fcc + Fsc Mc = Mcc + Msc return Fc, Mc, Ft, Mt def xu(self, ecmax: float = ecu) -> Union[float, Any]: dc_max = 10 x1, x2 = rootsearch(self.C_T, dc_max, self.D, 10, ecmax) x = brentq(self.C_T, x1, x2, args=(ecmax,)) return x def Mu(self, xu: float, ecmax: float = ecu) -> float: # Assuming area of tension steel to be such as to produce a tension force equal to C _, Mc = self.C(xu, ecmax) _, Mt = self.T(xu, ecmax) M = Mc + Mt return M def tauc(self, xu: float) -> float: return self.conc.tauc(self.pt(xu)) def __repr__(self) -> str: ecmax = self.csb.ecu xu = self.xu(ecmax) return self.report(xu, ecmax) def has_compr_steel(self, xu: float) -> bool: for L in self.long_steel.layers: if L._xc < xu: return True return False def report(self, xu: float, ecmax: float = ecu) -> str: # pragma: no cover self.calc_xc() self.calc_stress_type(xu) k = xu / self.D ecy = self.csb.ecy hdr0 = f\"RECTANGULAR BEAM SECTION: {self.b} x {self.D}\" s = f\"{header(hdr0, '~')}\\n\" s += f\"{header('FLEXURE', '=')}\\nEquilibrium NA = {xu:.2f} (k = {k:.2f}) (ec_max = {ecmax:.6f})\\n\\n\" fcc = self.csb._fc_(ecmax) * self.conc.fd Fc = self.b * self.csb.C(0, k, k, ecmax) * self.conc.fd * self.D Mc = self.csb.M(0, k, k) * self.conc.fd * self.b * self.D**2 hdr1 = f\"{'fck':>6} {' ':>8} {' ':>12} {'ec_max':>12} {'Type':>4} \" hdr1 += f\"{' ':>8} {'f_c':>6} {'F (kN)':>8} {'M (kNm)':>8}\" s += hdr1 + \"\\n\" + underline(hdr1) + \"\\n\" s += f\"{self.conc.fck:6.2f} {' ':>8} {' ':>12} {ecmax:12.8f} {'C':>4} {' ':>8} {fcc:6.2f} \" s += f\"{Fc / 1e3:8.2f} {Mc/ 1e6:8.2f}\\n{underline(hdr1)}\\n\\n\" Ft = 0.0 Mt = 0.0 hdr2 = f\"{'fy':>6} {'Bars':>12} {'xc':>8} {'Strain':>12} {'Type':>4} {'f_s':>8} {'f_c':>6}\" hdr2 += f\" {'F (kN)':>8} {'M (kNm)':>8}\" s += f\"{hdr2}\\n{underline(hdr2)}\\n\" for L in sorted(self.long_steel.layers): z = k - (L._xc / self.D) esc = self.csb.ec(z, k) * ecy stress_type = L.stress_type(xu) fsc = L.rebar.fs(esc) s += f\"{L.rebar.fy:6.0f} {L.bar_list():>12} {L._xc:8.2f} {esc:12.8f} \" s += f\"{StressLabel[stress_type][0]:>4} {fsc:8.2f} \" if stress_type == StressType.STRESS_COMPRESSION: fcc = self.csb.fc(z, k, ecmax) * self.conc.fd c = L.area * (fsc - fcc) s += f\"{fcc:6.2f} \" elif L._stress_type == StressType.STRESS_TENSION: c = L.area * fsc s += f\"{' ':>6} \" else: c = 0.0 m = c * (k * self.D - L._xc) s += f\"{c/1e3:8.2f} {m/1e6:8.2f}\\n\" Ft += c Mt += m s += f\"{underline(hdr2)}\\n\" if len(self.long_steel.layers) > 1: C_M = f\"{Ft/1e3:8.2f} {Mt/1e6:8.2f}\" s += f\"{' '*62} {C_M}\\n{' '*62} {underline(C_M, '=')}\\n\" F = 0.0 if isclose(Fc + Ft, 0, abs_tol=1e-10) else Fc + Ft C_M = f\"{F/1e3:8.2f} {(Mc + Mt)/1e6:8.2f}\" s += f\"{' ':>62} {C_M}\\n\" s += f\"{header('SHEAR', '=')}\\n\" tauc = self.conc.tauc(self.pt(xu)) area = self.b * self.eff_d(xu) vuc = area * tauc hdr3 = f\"{'Type':>14} {' ':>14} {'tau_c':>6} {'Area (mm^2)':>16} {' ':>8} {' ':>8} {'V_uc (kN)':>8}\" s += f\"{header(hdr3)}\\n\" s += f\"{'Concrete':>14} {' ':>14} {tauc:6.2f} {area:16.2f} {' ':>8} {' ':>8} {vuc/1e3:8.2f}\\n\" s += f\"{underline(hdr3)}\\n\" hdr4 = f\"{'Type':>14} {'Variant':>14} {'f_y':>6} {'Bars':>16} {'s_v':>8} {'A_sv':>8} {'V_us (kN)':>8}\" s += f\"{header(hdr4)}\\n\" vus = 0.0 for sh_rein in self.shear_steel.shear_reinforcement: data = sh_rein.report(self.eff_d(xu)) s += f\"{data['label']:>14} {data['type']:>14} {data['fy']:6} \" if data[\"sh_type\"] in [ ShearRebarType.SHEAR_REBAR_VERTICAL_STIRRUP, ShearRebarType.SHEAR_REBAR_INCLINED_STIRRUP, ]: bar_info = f\"{data['legs']}-{data['bar_dia']}#\" else: bar_info = f\"{data['bars']}\" s += f\"{bar_info:>16} {data['sv']:8.1f} {data['Asv']:8.2f} {data['Vus']/1e3:8.2f}\\n\" vus += data[\"Vus\"] vu = f\"{(vuc + vus)/1e3:8.2f}\" s += f\"{' ':>71} {underline(vu, '=')}\\n{' ':>71} {vu}\\n\" s += ( f\"{header('CAPACITY', '=')}\\n{'Mu = ':>5}{self.Mu(xu, ecmax)/1e6:.2f} kNm\\n\" ) Vuc, Vus = self.Vu(xu) Vu = Vuc + sum(Vus) s += f\"{'Vu = ':>5}{Vu/1e3:.2f} kN\\n\" return s def eff_d(self, xu: float) -> float: _, ct = self.long_steel.centroid(xu) return ct def pt(self, xu: float) -> float: ast = 0.0 for L in sorted(self.long_steel.layers): if L._xc > xu: ast += L.area d = self.eff_d(xu) pt = ast / (self.b * d) * 100 return pt def Vu(self, xu: float) -> Tuple[float, List[float]]: # print(\"\\nstart::RectBeamSection.Vu(xu)\", xu) pt = self.pt(xu) # print(\"stop::RectBeamSection.Vu(xu)\\n\") tauc = self.conc.tauc(pt) d = self.eff_d(xu) vuc = tauc * self.b * d vus = self.shear_steel.Vus(d) return vuc, vus def analyse(self, ecmax: float = ecu) -> Tuple[float, float]: xu = self.xu(ecmax) Mu = self.Mu(xu, ecmax) return xu, Mu def design_singly(self, bar_dia: float, Mu: float) -> Tuple[float, float]: beam = Beam() fck = self.conc.fck bottom_layer = self.long_steel.layers[-1] fy = bottom_layer.rebar.fy fd = bottom_layer.rebar.fd d = self.D - self.clear_cover - bar_dia / 2 dc = self.clear_cover + bar_dia / 2 Mulim = beam.Mulim_const(fy) * fck * self.b * d**2 if Mu < Mulim: ast = beam.reqd_Ast(fck, fy, self.b, d, Mu) asc = 0.0 else: ast1 = beam.reqd_Ast(fck, fy, self.b, d, Mulim) Mu2 = Mu - Mulim ast2 = Mu2 / (fd * (d - dc)) ast = ast1 + ast2 xu = beam.xumax_d(fy) * d esc = self.csb.ecu / xu * (xu - dc) fsc = bottom_layer.rebar.fs(esc) fcc = self.csb._fc_(esc) * self.conc.fd asc = ast2 * fd / (fsc - fcc) print(\"---\", xu, d, esc, fsc, fcc, ast1, ast2, ast, asc) return ast, asc Stress Block \u00b6 Utilities \u00b6","title":"API Reference"},{"location":"api/#api-reference","text":"","title":"API Reference"},{"location":"api/#materials","text":"","title":"Materials"},{"location":"api/#concrete","text":"","title":"Concrete"},{"location":"api/#rcdesign.is456.concrete.Concrete","text":"Concrete","title":"Concrete"},{"location":"api/#rcdesign.is456.concrete.Concrete--returns","text":"Concrete Concrete object Source code in rcdesign\\is456\\concrete.py @dataclass class Concrete: \"\"\"Concrete Returns ------- Concrete Concrete object \"\"\" label: str fck: float gamma_m: float = 1.5 density: float = 25.0 def __repr__(self) -> str: s = f\"fck = {self.fck:.2f} N/mm^2, fd = {self.fd:.2f} N/mm^2\" return s @property def Ec(self) -> float: return 5000 * sqrt(self.fck) @property def fd(self) -> float: return 0.67 * self.fck / self.gamma_m def tauc(self, pt: float) -> float: if pt < 0.15: pt = 0.15 if pt > 3: pt = 3.0 beta = max(1.0, (0.8 * self.fck) / (6.89 * pt)) num = 0.85 * sqrt(0.8 * self.fck) * (sqrt(1 + 5 * beta) - 1) den = 6 * beta return num / den def tauc_max(self): tauc = np.array([[15, 20, 25, 30, 35, 40], [2.5, 2.8, 3.1, 3.5, 3.7, 4.0]]) if self.fck < 15: return 0.0 elif self.fck >= tauc[0, -1]: return tauc[1, -1] else: for i in range(1, tauc.shape[1]): if self.fck <= tauc[0, i]: if self.fck == tauc[0, i]: return tauc[1, i] else: x1 = tauc[0, i - 1] y1 = tauc[1, i - 1] x2 = tauc[0, i] y2 = tauc[1, i] print(x1, x2, y1, y2) return y1 + (y2 - y1) / (x2 - x1) * (self.fck - x1)","title":"Returns"},{"location":"api/#rebar","text":"Classes to represent reinforcement bars, layers of reinforcement bars and groups of reinforcement layers","title":"Rebar"},{"location":"api/#rcdesign.is456.rebar.Rebar","text":"Bases: ABC Rebar object represents a reinforcment bar.","title":"Rebar"},{"location":"api/#rcdesign.is456.rebar.Rebar--parameters","text":"type description","title":"Parameters"},{"location":"api/#rcdesign.is456.rebar.Rebar--returns","text":"Rebar description Source code in rcdesign\\is456\\rebar.py @dataclass class Rebar(ABC): # pragma: no cover \"\"\"Rebar object represents a reinforcment bar. Parameters ---------- ABC : _type_ _description_ Returns ------- Rebar _description_ \"\"\" label: str fy: float gamma_m: float = 1.15 density: float = 78.5 Es: float = 2e5 rebar_type: RebarType = RebarType.REBAR_HYSD @property def fd(self) -> float: return self.fy / self.gamma_m def es_min(self) -> float: return self.fd / self.Es + 0.002 @abstractmethod def fs(self, es: float) -> float: pass","title":"Returns"},{"location":"api/#section","text":"Class to represent reinforced concrete cross sections","title":"Section"},{"location":"api/#rcdesign.is456.section.DesignForceType","text":"Bases: Enum DesignForceType object is an enumeration Source code in rcdesign\\is456\\section.py class DesignForceType(Enum): \"\"\"DesignForceType object is an enumeration \"\"\" BEAM = 1 COLUMN = 2 SLAB = 3 SHEARWALL = 4","title":"DesignForceType"},{"location":"api/#rcdesign.is456.section.RectBeamSection","text":"RectBeamSection object represnts a rectangular beam section subjected to bending and shear.","title":"RectBeamSection"},{"location":"api/#rcdesign.is456.section.RectBeamSection--returns","text":"RectBeamSection description Source code in rcdesign\\is456\\section.py @dataclass class RectBeamSection: \"\"\"RectBeamSection object represnts a rectangular beam section subjected to bending and shear. Returns ------- RectBeamSection _description_ \"\"\" b: float D: float csb: LSMStressBlock conc: Concrete long_steel: RebarGroup shear_steel: ShearRebarGroup clear_cover: float def __post_init__(self): self.design_force_type = DesignForceType.BEAM self.calc_xc() def calc_xc(self) -> None: self.long_steel.calc_xc(self.D) return None def calc_stress_type(self, xu: float) -> None: self.calc_xc() self.long_steel.calc_stress_type(xu) def C(self, xu: float, ecmax: float = ecu) -> Tuple[float, float]: Fc, Mc, _, _ = self.F_M(xu, ecmax) return Fc, Mc def T(self, xu: float, ecmax: float) -> Tuple[float, float]: _, _, Ft, Mt = self.F_M(xu, ecmax) return Ft, Mt def C_T(self, xu: float, ecmax: float = ecu) -> float: self.calc_stress_type(xu) C, _, T, _ = self.F_M(xu, ecmax) return C - T def F_M(self, xu: float, ecmax: float = ecu) -> Tuple[float, float, float, float]: # sb = LSMStressBlock(\"LSM Flexure\") self.calc_stress_type(xu) Fc = Mc = Ft = Mt = 0.0 # Compression force - concrete k = xu / self.D Fcc = self.csb.C(0, k, k, ecmax) * self.conc.fd * self.b * self.D Mcc = self.csb.M(0, k, k, ecmax) * self.conc.fd * self.b * self.D**2 # Compression force - compression steel Fsc, Msc, Fst, Mst = self.long_steel.force_moment( xu, self.csb, self.conc, ecmax ) # Tension force in tension steel Ft, Mt = self.long_steel.force_tension(xu, ecmax) Fc = Fcc + Fsc Mc = Mcc + Msc return Fc, Mc, Ft, Mt def xu(self, ecmax: float = ecu) -> Union[float, Any]: dc_max = 10 x1, x2 = rootsearch(self.C_T, dc_max, self.D, 10, ecmax) x = brentq(self.C_T, x1, x2, args=(ecmax,)) return x def Mu(self, xu: float, ecmax: float = ecu) -> float: # Assuming area of tension steel to be such as to produce a tension force equal to C _, Mc = self.C(xu, ecmax) _, Mt = self.T(xu, ecmax) M = Mc + Mt return M def tauc(self, xu: float) -> float: return self.conc.tauc(self.pt(xu)) def __repr__(self) -> str: ecmax = self.csb.ecu xu = self.xu(ecmax) return self.report(xu, ecmax) def has_compr_steel(self, xu: float) -> bool: for L in self.long_steel.layers: if L._xc < xu: return True return False def report(self, xu: float, ecmax: float = ecu) -> str: # pragma: no cover self.calc_xc() self.calc_stress_type(xu) k = xu / self.D ecy = self.csb.ecy hdr0 = f\"RECTANGULAR BEAM SECTION: {self.b} x {self.D}\" s = f\"{header(hdr0, '~')}\\n\" s += f\"{header('FLEXURE', '=')}\\nEquilibrium NA = {xu:.2f} (k = {k:.2f}) (ec_max = {ecmax:.6f})\\n\\n\" fcc = self.csb._fc_(ecmax) * self.conc.fd Fc = self.b * self.csb.C(0, k, k, ecmax) * self.conc.fd * self.D Mc = self.csb.M(0, k, k) * self.conc.fd * self.b * self.D**2 hdr1 = f\"{'fck':>6} {' ':>8} {' ':>12} {'ec_max':>12} {'Type':>4} \" hdr1 += f\"{' ':>8} {'f_c':>6} {'F (kN)':>8} {'M (kNm)':>8}\" s += hdr1 + \"\\n\" + underline(hdr1) + \"\\n\" s += f\"{self.conc.fck:6.2f} {' ':>8} {' ':>12} {ecmax:12.8f} {'C':>4} {' ':>8} {fcc:6.2f} \" s += f\"{Fc / 1e3:8.2f} {Mc/ 1e6:8.2f}\\n{underline(hdr1)}\\n\\n\" Ft = 0.0 Mt = 0.0 hdr2 = f\"{'fy':>6} {'Bars':>12} {'xc':>8} {'Strain':>12} {'Type':>4} {'f_s':>8} {'f_c':>6}\" hdr2 += f\" {'F (kN)':>8} {'M (kNm)':>8}\" s += f\"{hdr2}\\n{underline(hdr2)}\\n\" for L in sorted(self.long_steel.layers): z = k - (L._xc / self.D) esc = self.csb.ec(z, k) * ecy stress_type = L.stress_type(xu) fsc = L.rebar.fs(esc) s += f\"{L.rebar.fy:6.0f} {L.bar_list():>12} {L._xc:8.2f} {esc:12.8f} \" s += f\"{StressLabel[stress_type][0]:>4} {fsc:8.2f} \" if stress_type == StressType.STRESS_COMPRESSION: fcc = self.csb.fc(z, k, ecmax) * self.conc.fd c = L.area * (fsc - fcc) s += f\"{fcc:6.2f} \" elif L._stress_type == StressType.STRESS_TENSION: c = L.area * fsc s += f\"{' ':>6} \" else: c = 0.0 m = c * (k * self.D - L._xc) s += f\"{c/1e3:8.2f} {m/1e6:8.2f}\\n\" Ft += c Mt += m s += f\"{underline(hdr2)}\\n\" if len(self.long_steel.layers) > 1: C_M = f\"{Ft/1e3:8.2f} {Mt/1e6:8.2f}\" s += f\"{' '*62} {C_M}\\n{' '*62} {underline(C_M, '=')}\\n\" F = 0.0 if isclose(Fc + Ft, 0, abs_tol=1e-10) else Fc + Ft C_M = f\"{F/1e3:8.2f} {(Mc + Mt)/1e6:8.2f}\" s += f\"{' ':>62} {C_M}\\n\" s += f\"{header('SHEAR', '=')}\\n\" tauc = self.conc.tauc(self.pt(xu)) area = self.b * self.eff_d(xu) vuc = area * tauc hdr3 = f\"{'Type':>14} {' ':>14} {'tau_c':>6} {'Area (mm^2)':>16} {' ':>8} {' ':>8} {'V_uc (kN)':>8}\" s += f\"{header(hdr3)}\\n\" s += f\"{'Concrete':>14} {' ':>14} {tauc:6.2f} {area:16.2f} {' ':>8} {' ':>8} {vuc/1e3:8.2f}\\n\" s += f\"{underline(hdr3)}\\n\" hdr4 = f\"{'Type':>14} {'Variant':>14} {'f_y':>6} {'Bars':>16} {'s_v':>8} {'A_sv':>8} {'V_us (kN)':>8}\" s += f\"{header(hdr4)}\\n\" vus = 0.0 for sh_rein in self.shear_steel.shear_reinforcement: data = sh_rein.report(self.eff_d(xu)) s += f\"{data['label']:>14} {data['type']:>14} {data['fy']:6} \" if data[\"sh_type\"] in [ ShearRebarType.SHEAR_REBAR_VERTICAL_STIRRUP, ShearRebarType.SHEAR_REBAR_INCLINED_STIRRUP, ]: bar_info = f\"{data['legs']}-{data['bar_dia']}#\" else: bar_info = f\"{data['bars']}\" s += f\"{bar_info:>16} {data['sv']:8.1f} {data['Asv']:8.2f} {data['Vus']/1e3:8.2f}\\n\" vus += data[\"Vus\"] vu = f\"{(vuc + vus)/1e3:8.2f}\" s += f\"{' ':>71} {underline(vu, '=')}\\n{' ':>71} {vu}\\n\" s += ( f\"{header('CAPACITY', '=')}\\n{'Mu = ':>5}{self.Mu(xu, ecmax)/1e6:.2f} kNm\\n\" ) Vuc, Vus = self.Vu(xu) Vu = Vuc + sum(Vus) s += f\"{'Vu = ':>5}{Vu/1e3:.2f} kN\\n\" return s def eff_d(self, xu: float) -> float: _, ct = self.long_steel.centroid(xu) return ct def pt(self, xu: float) -> float: ast = 0.0 for L in sorted(self.long_steel.layers): if L._xc > xu: ast += L.area d = self.eff_d(xu) pt = ast / (self.b * d) * 100 return pt def Vu(self, xu: float) -> Tuple[float, List[float]]: # print(\"\\nstart::RectBeamSection.Vu(xu)\", xu) pt = self.pt(xu) # print(\"stop::RectBeamSection.Vu(xu)\\n\") tauc = self.conc.tauc(pt) d = self.eff_d(xu) vuc = tauc * self.b * d vus = self.shear_steel.Vus(d) return vuc, vus def analyse(self, ecmax: float = ecu) -> Tuple[float, float]: xu = self.xu(ecmax) Mu = self.Mu(xu, ecmax) return xu, Mu def design_singly(self, bar_dia: float, Mu: float) -> Tuple[float, float]: beam = Beam() fck = self.conc.fck bottom_layer = self.long_steel.layers[-1] fy = bottom_layer.rebar.fy fd = bottom_layer.rebar.fd d = self.D - self.clear_cover - bar_dia / 2 dc = self.clear_cover + bar_dia / 2 Mulim = beam.Mulim_const(fy) * fck * self.b * d**2 if Mu < Mulim: ast = beam.reqd_Ast(fck, fy, self.b, d, Mu) asc = 0.0 else: ast1 = beam.reqd_Ast(fck, fy, self.b, d, Mulim) Mu2 = Mu - Mulim ast2 = Mu2 / (fd * (d - dc)) ast = ast1 + ast2 xu = beam.xumax_d(fy) * d esc = self.csb.ecu / xu * (xu - dc) fsc = bottom_layer.rebar.fs(esc) fcc = self.csb._fc_(esc) * self.conc.fd asc = ast2 * fd / (fsc - fcc) print(\"---\", xu, d, esc, fsc, fcc, ast1, ast2, ast, asc) return ast, asc","title":"Returns"},{"location":"api/#stress-block","text":"","title":"Stress Block"},{"location":"api/#utilities","text":"","title":"Utilities"},{"location":"installation/","text":"Installation \u00b6 Install from PyPI using pip \u00b6 Requirements \u00b6 Python 3.7+ numpy scipy sympy Install from PyPI \u00b6 Create a separate directory and install a virtual environment. Activate the virtual environment and install required packages. On *nix systems, do the following: $ mkdir rcd_tutorial $ cd rcd_tutorial $ python -m venv .venv $ .venv/bin/activate $ _ On Windows, do the following: > mkdir rcd_tutorial > cd rcd_tutorial > python -m venv .venv > .venv\\Scripts\\activate > (.venv) _ Install using pip $ (.venv) pip install -U rcdesign $ (.venv) python -c \"from rcdesign import __version__;print(__version____) $ 0.4.14 Run the two built-in examples problem and study the output. $ (.venv) python -m rcdesign Install from Source on github \u00b6 Clone the repository \u00b6 Choose a suitable directory where you wish to clone the source code from github. Clone the repository using git $ git clone https://github.com/satish-annigeri/rcdesign.git When you clone the rcdesign repository from github, a new directory named rcdesign will be created in the current working directory. Change over to the directory rcdesign that is created with the command $ cd rcdesign List the directory contents and verify the directory structure. Install required packages \u00b6 Install required packages into the virtual environment with pip (.venv) $ pip install -U rcdesign[test] This will install pytest and pytest-cov required to run the tests. Run tests \u00b6 Run the tests with pytest (.venv) $ pytest tests Check code coverage. (.venv) $ pytest --cov=rcdesign tests You can also use nox to run the tests. Install nox using pip , if necessary. (.venv) $ pip install nox (.venv) $ nox When you are done using the virtual environment, you can deactivate it with the command deactivate at the command prompt in all operating systems. Testing \u00b6 Testing has been implemented using pytest and unit tests have been implemented for the following classes: ConcreteLSMFlexure and Concrete RebarMS and RebarHYSD RebarLayer and RebarGroup ShearReinforcement and Stirrups RectBeamSection and FlangedBeamSection RectColumnSection Code coverage through tests using pytest-cov at the current time is 100%, excepting the example script and the methods that implement __repe__() and report() . Analysis of rectangular and flanged beam sections with and without compression reinforcement, for flexure and shear, has been completed. Several examples have been solved and verified by hand to consider different cases. Analysis of rectangular column sections for combined axial compression and bending about one axis has been completed. An example has been solved and verified by hand. Automated testing can be done using. If required, install nox with the command: (.venv) $pip install nox Check to ensure that nox is installed and run the tests. (.venv) $ nox --version 2022.11.21 (.venv) $ nox Examples \u00b6 Built-in Example \u00b6 Run the built-in example with the following command. (.venv) $ python -m rcdesign Examples from tests Directory \u00b6 Run the additional examples in the tests directory with the following command from the command prompt: (.venv) $ python -m tests.example01 (.venv) $ python -m tests.example02 ... (.venv) $ python -m tests.example09 Your Own Example \u00b6 Alternately, you can create the following Python script example.py , which is in fact the first example in the __main__.py file of the rcdesign package (the built-in example), and run the script. from rcdesign.is456.stressblock import LSMStressBlock from rcdesign.is456.concrete import Concrete from rcdesign.is456.rebar import ( RebarHYSD, RebarLayer, RebarGroup, ShearRebarGroup, Stirrups, ) from rcdesign.is456.section import RectBeamSection sb = LSMStressBlock(\"LSM Flexure\") m20 = Concrete(\"M20\", 20) fe415 = RebarHYSD(\"Fe 415\", 415) t1 = RebarLayer(fe415, [20, 16, 20], -35) steel = RebarGroup([t1]) sh_st = ShearRebarGroup([Stirrups(fe415, 2, 8, 150)]) sec = RectBeamSection(230, 450, sb, m20, steel, sh_st, 25) xu = sec.xu(0.0035)RECTANGULAR BEAM SECTION: 230 x 450 Check the output. Example 1 RECTANGULAR BEAM SECTION: 230 x 450 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FLEXURE ======= Equilibrium NA = 179.94 (k = 0.40) (ec_max = 0.003500) fck ec_max Type f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 20.00 0.00350000 C 8.93 299.30 31.45 -------------------------------------------------------------------------------- fy Bars xc Strain Type f_sc f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 415 1-16;2-20 415.00 -0.00457204 T -360.87 -299.30 70.35 -------------------------------------------------------------------------------- 0.00 101.81 SHEAR ===== Type tau_c Area (mm^2) V_uc (kN) --------------------------------------------------------------------------------- Concrete 0.59 95450.00 56.46 --------------------------------------------------------------------------------- Type Variant f_y Bars s_v A_sv V_us (kN) --------------------------------------------------------------------------------- Stirrups Vertical 415 2-8# 150.0 100.53 100.37 ======== 156.83 CAPACITY ======== Mu = 101.81 kNm Vu = 156.83 kN ================================================================================ Example 2 RECTANGULAR BEAM SECTION: 230 x 450 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FLEXURE ======= Equilibrium NA = 136.21 (k = 0.30) (ec_max = 0.003500) fck ec_max Type f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 20.00 0.00350000 C 8.93 226.56 18.02 -------------------------------------------------------------------------------- fy Bars xc Strain Type f_sc f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 415 2-16 35.00 0.00260065 C 347.70 8.93 136.23 13.79 415 2-16 380.00 -0.00626432 T -360.87 -145.11 35.38 415 3-16 415.00 -0.00716367 T -360.87 -217.67 60.68 -------------------------------------------------------------------------------- -226.56 109.85 ================= 0.00 127.87 SHEAR ===== Type tau_c Area (mm^2) V_uc (kN) --------------------------------------------------------------------------------- Concrete 0.64 92230.00 59.21 --------------------------------------------------------------------------------- Type Variant f_y Bars s_v A_sv V_us (kN) --------------------------------------------------------------------------------- Stirrups Vertical 415 2-8# 150.0 100.53 96.98 ======== 156.19 CAPACITY ======== Mu = 127.87 kNm Vu = 156.19 kN","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#install-from-pypi-using-pip","text":"","title":"Install from PyPI using pip"},{"location":"installation/#requirements","text":"Python 3.7+ numpy scipy sympy","title":"Requirements"},{"location":"installation/#install-from-pypi","text":"Create a separate directory and install a virtual environment. Activate the virtual environment and install required packages. On *nix systems, do the following: $ mkdir rcd_tutorial $ cd rcd_tutorial $ python -m venv .venv $ .venv/bin/activate $ _ On Windows, do the following: > mkdir rcd_tutorial > cd rcd_tutorial > python -m venv .venv > .venv\\Scripts\\activate > (.venv) _ Install using pip $ (.venv) pip install -U rcdesign $ (.venv) python -c \"from rcdesign import __version__;print(__version____) $ 0.4.14 Run the two built-in examples problem and study the output. $ (.venv) python -m rcdesign","title":"Install from PyPI"},{"location":"installation/#install-from-source-on-github","text":"","title":"Install from Source on github"},{"location":"installation/#clone-the-repository","text":"Choose a suitable directory where you wish to clone the source code from github. Clone the repository using git $ git clone https://github.com/satish-annigeri/rcdesign.git When you clone the rcdesign repository from github, a new directory named rcdesign will be created in the current working directory. Change over to the directory rcdesign that is created with the command $ cd rcdesign List the directory contents and verify the directory structure.","title":"Clone the repository"},{"location":"installation/#install-required-packages","text":"Install required packages into the virtual environment with pip (.venv) $ pip install -U rcdesign[test] This will install pytest and pytest-cov required to run the tests.","title":"Install required packages"},{"location":"installation/#run-tests","text":"Run the tests with pytest (.venv) $ pytest tests Check code coverage. (.venv) $ pytest --cov=rcdesign tests You can also use nox to run the tests. Install nox using pip , if necessary. (.venv) $ pip install nox (.venv) $ nox When you are done using the virtual environment, you can deactivate it with the command deactivate at the command prompt in all operating systems.","title":"Run tests"},{"location":"installation/#testing","text":"Testing has been implemented using pytest and unit tests have been implemented for the following classes: ConcreteLSMFlexure and Concrete RebarMS and RebarHYSD RebarLayer and RebarGroup ShearReinforcement and Stirrups RectBeamSection and FlangedBeamSection RectColumnSection Code coverage through tests using pytest-cov at the current time is 100%, excepting the example script and the methods that implement __repe__() and report() . Analysis of rectangular and flanged beam sections with and without compression reinforcement, for flexure and shear, has been completed. Several examples have been solved and verified by hand to consider different cases. Analysis of rectangular column sections for combined axial compression and bending about one axis has been completed. An example has been solved and verified by hand. Automated testing can be done using. If required, install nox with the command: (.venv) $pip install nox Check to ensure that nox is installed and run the tests. (.venv) $ nox --version 2022.11.21 (.venv) $ nox","title":"Testing"},{"location":"installation/#examples","text":"","title":"Examples"},{"location":"installation/#built-in-example","text":"Run the built-in example with the following command. (.venv) $ python -m rcdesign","title":"Built-in Example"},{"location":"installation/#examples-from-tests-directory","text":"Run the additional examples in the tests directory with the following command from the command prompt: (.venv) $ python -m tests.example01 (.venv) $ python -m tests.example02 ... (.venv) $ python -m tests.example09","title":"Examples from tests Directory"},{"location":"installation/#your-own-example","text":"Alternately, you can create the following Python script example.py , which is in fact the first example in the __main__.py file of the rcdesign package (the built-in example), and run the script. from rcdesign.is456.stressblock import LSMStressBlock from rcdesign.is456.concrete import Concrete from rcdesign.is456.rebar import ( RebarHYSD, RebarLayer, RebarGroup, ShearRebarGroup, Stirrups, ) from rcdesign.is456.section import RectBeamSection sb = LSMStressBlock(\"LSM Flexure\") m20 = Concrete(\"M20\", 20) fe415 = RebarHYSD(\"Fe 415\", 415) t1 = RebarLayer(fe415, [20, 16, 20], -35) steel = RebarGroup([t1]) sh_st = ShearRebarGroup([Stirrups(fe415, 2, 8, 150)]) sec = RectBeamSection(230, 450, sb, m20, steel, sh_st, 25) xu = sec.xu(0.0035)RECTANGULAR BEAM SECTION: 230 x 450 Check the output. Example 1 RECTANGULAR BEAM SECTION: 230 x 450 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FLEXURE ======= Equilibrium NA = 179.94 (k = 0.40) (ec_max = 0.003500) fck ec_max Type f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 20.00 0.00350000 C 8.93 299.30 31.45 -------------------------------------------------------------------------------- fy Bars xc Strain Type f_sc f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 415 1-16;2-20 415.00 -0.00457204 T -360.87 -299.30 70.35 -------------------------------------------------------------------------------- 0.00 101.81 SHEAR ===== Type tau_c Area (mm^2) V_uc (kN) --------------------------------------------------------------------------------- Concrete 0.59 95450.00 56.46 --------------------------------------------------------------------------------- Type Variant f_y Bars s_v A_sv V_us (kN) --------------------------------------------------------------------------------- Stirrups Vertical 415 2-8# 150.0 100.53 100.37 ======== 156.83 CAPACITY ======== Mu = 101.81 kNm Vu = 156.83 kN ================================================================================ Example 2 RECTANGULAR BEAM SECTION: 230 x 450 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FLEXURE ======= Equilibrium NA = 136.21 (k = 0.30) (ec_max = 0.003500) fck ec_max Type f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 20.00 0.00350000 C 8.93 226.56 18.02 -------------------------------------------------------------------------------- fy Bars xc Strain Type f_sc f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 415 2-16 35.00 0.00260065 C 347.70 8.93 136.23 13.79 415 2-16 380.00 -0.00626432 T -360.87 -145.11 35.38 415 3-16 415.00 -0.00716367 T -360.87 -217.67 60.68 -------------------------------------------------------------------------------- -226.56 109.85 ================= 0.00 127.87 SHEAR ===== Type tau_c Area (mm^2) V_uc (kN) --------------------------------------------------------------------------------- Concrete 0.64 92230.00 59.21 --------------------------------------------------------------------------------- Type Variant f_y Bars s_v A_sv V_us (kN) --------------------------------------------------------------------------------- Stirrups Vertical 415 2-8# 150.0 100.53 96.98 ======== 156.19 CAPACITY ======== Mu = 127.87 kNm Vu = 156.19 kN","title":"Your Own Example"},{"location":"tutorial/","text":"Tutorial \u00b6 Install rcdesign \u00b6 Create a folder for your tutorial files. Create a virtual environment if you prefer. Install rcdesign from PyPI using pip as explained in Installation . Verify that installation is successful, by running the example problem: (env) $ python -m rcdesign If things have gone well, the required packages will also be installed, and you are ready to go. Open your preferred IDE and try out the following examples. Create a Python script for each example and type the code given below. Then, run the scripts and compare your output with the one given here in the examples. Verify with your own manual calculations if necessary. Singly reinforced rectangular section \u00b6 Consider a rectangular reinforced concrete section with the following details: Size: 230x450 mm overall with 25mm clear cover Concrete: M20 Steel: Fe415 Main reinforcement: Fe415 reinforcement bars 2-16# + 1-20# with centre of the bars at a distance of 35mm from tension edge of the section Shear reinforcement: 2-8# @ 150mm c/c (2 legged 8mm dia. vertical stirrups made of Fe415) Let us determine the Limit State capacity of the section in bending and shear. Create a Python script named singly01.py and type the following code in it. # File: example01.py from rcdesign.is456.concrete import Concrete from rcdesign.is456.stressblock import LSMStressBlock from rcdesign.is456.rebar import ( RebarHYSD, RebarLayer, RebarGroup, Stirrups, ShearRebarGroup, ) from rcdesign.is456.section import RectBeamSection sb = LSMStressBlock(\"LSM Flexure\") m20 = Concrete(\"M20\", 20) fe415 = RebarHYSD(\"Fe 415\", 415) t1 = RebarLayer(fe415, [20, 16, 20], -35) steel = RebarGroup([t1]) sh_st = ShearRebarGroup([Stirrups(fe415, 2, 8, 150)]) sec = RectBeamSection(230, 450, sb, m20, steel, sh_st, 25) xu = sec.xu(0.0035) print(f\"xu = {xu:.2f}\") print(sec.report(xu, 0.0035)) Run the script from the command line: $ python singly01.py The output of the script must be xu = 179.94 RECTANGULAR BEAM SECTION: 230 x 450 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FLEXURE ======= Equilibrium NA = 179.94 (k = 0.40) (ec_max = 0.003500) fck ec_max Type f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 20.00 0.00350000 C 8.93 299.30 31.45 -------------------------------------------------------------------------------- fy Bars xc Strain Type f_sc f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 415 1-16;2-20 415.00 -0.00457204 T -360.87 -299.30 70.35 -------------------------------------------------------------------------------- 0.00 101.81 SHEAR ===== Type tau_c Area (mm^2) V_uc (kN) --------------------------------------------------------------------------------- Concrete 0.59 95450.00 56.46 --------------------------------------------------------------------------------- Type Variant f_y Bars s_v A_sv V_us (kN) --------------------------------------------------------------------------------- Stirrups Vertical 415 2-8# 150.0 100.53 100.37 ======== 156.83 CAPACITY ======== Mu = 101.81 kNm Vu = 156.83 kN Doubly reinforced rectangular section \u00b6 Consider a rectangular reinforced concrete beam section with the following details: Size: 230x450 mm overall with 25mm clear cover Concrete: M20 Steel: Fe415 Main reinforcement: 2-16# of Fe415 with centre of the bars at a distance of 35mm from compression edge of the section 3-16# of Fe415 with centre of the bars at a distance of 35mm from tension edge of the section Shear reinforcement: 2-8# @ 150mm c/c (2 legged 8mm dia. vertical stirrups made of Fe415) Let us determine the Limit State capacity of the section in bending and shear. Create a Python script named example02.py and type the following code in it. # File: example02.py from rcdesign.is456.stressblock import LSMStressBlock from rcdesign.is456.concrete import Concrete from rcdesign.is456.rebar import ( RebarHYSD, RebarLayer, RebarGroup, Stirrups, ShearRebarGroup, ) from rcdesign.is456.section import RectBeamSection sb = LSMStressBlock(\"IS456 LSM\") m20 = Concrete(\"M20\", 20) fe415 = RebarHYSD(\"Fe 415\", 415) t1 = RebarLayer(fe415, [16, 16], 35) t2 = RebarLayer(fe415, [16, 16, 16], -35) steel = RebarGroup([t1, t2]) sh_st = ShearRebarGroup([Stirrups(fe415, 2, 8, 150)]) sec = RectBeamSection(230, 450, sb, m20, steel, sh_st, 25) xu = sec.xu(0.0035) print(sec.report(xu, 0.0035)) Run the script from the command line: (env) $ python example02.py RECTANGULAR BEAM SECTION: 230 x 450 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FLEXURE ======= Equilibrium NA = 61.57 (k = 0.14) (ec_max = 0.003500) fck ec_max Type f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 20.00 0.00350000 C 8.93 102.41 3.68 -------------------------------------------------------------------------------- fy Bars xc Strain Type f_sc f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 415 2-16 35.00 0.00151034 C 295.04 8.40 115.26 3.06 415 3-16 415.00 -0.02009170 T -360.87 -217.67 76.93 -------------------------------------------------------------------------------- -102.41 79.99 ================= 0.00 83.68 SHEAR ===== Type tau_c Area (mm^2) V_uc (kN) --------------------------------------------------------------------------------- Concrete 0.52 95450.00 50.07 --------------------------------------------------------------------------------- Type Variant f_y Bars s_v A_sv V_us (kN) --------------------------------------------------------------------------------- Stirrups Vertical 415 2-8# 150.0 100.53 100.37 ======== 150.44 CAPACITY ======== Mu = 83.68 kNm Vu = 150.44 kN Flanged Beam \u00b6 Consider a flanged reinforced concrete beam section with the following details: Web size: 300x475 mm overall with 25mm clear cover Flange size: Width=800 mm and depth = 150 mm Concrete: M25 Steel: Fe415 Main reinforcement: 2-18# of Fe415 with centre of the bars at a distance of 70 mm from tension edge of the section and 3-20# of Fe415 with centre of the bars at a distance of 35 mm from tension edge of the section Shear reinforcement: 2-8# @ 150mm c/c (2 legged 8mm dia. vertical stirrups made of Fe415) Let us determine the Limit State capacity of the section in bending and shear. Create a Python script named example03.py and type the following code in it. # File: example03.py from rcdesign.is456.stressblock import LSMStressBlock from rcdesign.is456.concrete import Concrete from rcdesign.is456.rebar import ( RebarHYSD, RebarLayer, RebarGroup, Stirrups, ShearRebarGroup, ) from rcdesign.is456.section import FlangedBeamSection sb = LSMStressBlock(\"IS456 LSM\") m25 = Concrete(\"M25\", 25) fe415 = RebarHYSD(\"Fe 415\", 415) t1 = RebarLayer(fe415, [20, 20, 20], -35) t2 = RebarLayer(fe415, [18, 18], -70) main_steel = RebarGroup([t1, t2]) shear_steel = ShearRebarGroup([Stirrups(fe415, 2, 8, 150)]) tsec = FlangedBeamSection(300, 475, 800, 150, sb, m25, main_steel, shear_steel, 25) xu = tsec.xu(0.0035) print(tsec.report(xu, 0.0035)) Run the example (env) $ python example03.py FLANGED BEAM SECTION - Web: 300 x 475, Flange: 800 x 150 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FLEXURE ======= Equilibrium NA = 72.43 (ec_max = 0.003500) fck Breadth Depth ec_min ec_max Type C (kN) M (kNm) -------------------------------------------------------------------------------- 25 300.00 475.00 0.00000000 0.00350000 C 196.41 8.31 25 800.00 150.00 0.00350000 C 327.36 13.85 -------------------------------------------------------------------------------- 523.77 22.16 fy Bars xc Strain Type f_sc f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 415 2-18 405.00 -0.01607150 T -360.87 -183.66 61.08 415 3-20 440.00 -0.01776287 T -360.87 -340.11 125.02 -------------------------------------------------------------------------------- -523.77 186.10 ================= 0.00 208.25 SHEAR ===== Type tau_c Area (mm^2) V_uc (kN) --------------------------------------------------------------------------------- Concrete 0.67 128318.18 86.14 --------------------------------------------------------------------------------- Type Variant f_y Bars s_v A_sv V_us (kN) --------------------------------------------------------------------------------- Stirrups Vertical 415 2-8# 150.0 100.53 103.45 ======== 189.58 CAPACITY ======== Mu = 208.25 kNm Vu = 189.58 kN Rectangular Column \u00b6 Consider a rectangular reinforced concrete column section with the following details: Rectangular column of size: 230x450 mm Concrete: M20 Steel: Fe415 Longitudinal reinforcement: Fe415 in three layers: 3-16# at 50 mm from highly compressed edge 2-16# at 225 mm from highly compressed edge 3-16# at 400 mm from highly compressed edge (or 50 mm from the least compressed edge) Location of neutral axis: At 900 mm from highly compressed edge ($x_u=900$ and $k = \\frac{x_u}{D}=2.0$). Create a Python script named example04.py and type the following code in it. # File: example04.py from rcdesign.is456.concrete import Concrete from rcdesign.is456.stressblock import LSMStressBlock from rcdesign.is456.rebar import RebarHYSD, LateralTie, RebarLayer, RebarGroup from rcdesign.is456.section import RectColumnSection b = 230 D = 450 csb = LSMStressBlock(\"LSM Compression\") m20 = Concrete(\"M20\", 20) fe415 = RebarHYSD(\"Fe 415\", 415) L1 = RebarLayer(fe415, [16, 16, 16], 50) L2 = RebarLayer(fe415, [16, 16], D / 2) L3 = RebarLayer(fe415, [16, 16, 16], -50) long_st = RebarGroup([L1, L2, L3]) lat_ties = LateralTie(fe415, 8, 150) colsec = RectColumnSection(b, D, csb, m20, long_st, lat_ties, 35) xu = 900 k = xu / D # k = 2 / 3 print(colsec.report(xu)) Run the example. (env) $ python example04.py RECTANGULAR COLUMN 230 x 450 xu = 900.00 (k = 2.00) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Concrete: fck = 20.00 N/mm^2, fd = 8.93 N/mm^2 Clear Cover: 35 fck ecmin ecmax Type fsc1 fsc2 Cc Mc -------------------------------------------------------------------------------- 20.00 0.00127273 0.00254545 C 7.75 8.93 901.31 612.13 -------------------------------------------------------------------------------- fy Bars xc Strain Type fsc fcc C (kN) M (kNm) -------------------------------------------------------------------------------- 415 3-16 50.00 0.00240404 C 342.45 8.93 201.18 171.00 415 2-16 225.00 0.00190909 C 323.86 8.91 126.65 85.49 415 3-16 400.00 0.00141414 C 282.83 8.17 165.67 82.84 -------------------------------------------------------------------------------- 493.49 339.32 ================= 1394.81 951.45 CAPACITY ======== Pu = 1394.81 kN Mu = 951.45 kNm e = 682.14 mm","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"tutorial/#install-rcdesign","text":"Create a folder for your tutorial files. Create a virtual environment if you prefer. Install rcdesign from PyPI using pip as explained in Installation . Verify that installation is successful, by running the example problem: (env) $ python -m rcdesign If things have gone well, the required packages will also be installed, and you are ready to go. Open your preferred IDE and try out the following examples. Create a Python script for each example and type the code given below. Then, run the scripts and compare your output with the one given here in the examples. Verify with your own manual calculations if necessary.","title":"Install rcdesign"},{"location":"tutorial/#singly-reinforced-rectangular-section","text":"Consider a rectangular reinforced concrete section with the following details: Size: 230x450 mm overall with 25mm clear cover Concrete: M20 Steel: Fe415 Main reinforcement: Fe415 reinforcement bars 2-16# + 1-20# with centre of the bars at a distance of 35mm from tension edge of the section Shear reinforcement: 2-8# @ 150mm c/c (2 legged 8mm dia. vertical stirrups made of Fe415) Let us determine the Limit State capacity of the section in bending and shear. Create a Python script named singly01.py and type the following code in it. # File: example01.py from rcdesign.is456.concrete import Concrete from rcdesign.is456.stressblock import LSMStressBlock from rcdesign.is456.rebar import ( RebarHYSD, RebarLayer, RebarGroup, Stirrups, ShearRebarGroup, ) from rcdesign.is456.section import RectBeamSection sb = LSMStressBlock(\"LSM Flexure\") m20 = Concrete(\"M20\", 20) fe415 = RebarHYSD(\"Fe 415\", 415) t1 = RebarLayer(fe415, [20, 16, 20], -35) steel = RebarGroup([t1]) sh_st = ShearRebarGroup([Stirrups(fe415, 2, 8, 150)]) sec = RectBeamSection(230, 450, sb, m20, steel, sh_st, 25) xu = sec.xu(0.0035) print(f\"xu = {xu:.2f}\") print(sec.report(xu, 0.0035)) Run the script from the command line: $ python singly01.py The output of the script must be xu = 179.94 RECTANGULAR BEAM SECTION: 230 x 450 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FLEXURE ======= Equilibrium NA = 179.94 (k = 0.40) (ec_max = 0.003500) fck ec_max Type f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 20.00 0.00350000 C 8.93 299.30 31.45 -------------------------------------------------------------------------------- fy Bars xc Strain Type f_sc f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 415 1-16;2-20 415.00 -0.00457204 T -360.87 -299.30 70.35 -------------------------------------------------------------------------------- 0.00 101.81 SHEAR ===== Type tau_c Area (mm^2) V_uc (kN) --------------------------------------------------------------------------------- Concrete 0.59 95450.00 56.46 --------------------------------------------------------------------------------- Type Variant f_y Bars s_v A_sv V_us (kN) --------------------------------------------------------------------------------- Stirrups Vertical 415 2-8# 150.0 100.53 100.37 ======== 156.83 CAPACITY ======== Mu = 101.81 kNm Vu = 156.83 kN","title":"Singly reinforced rectangular section"},{"location":"tutorial/#doubly-reinforced-rectangular-section","text":"Consider a rectangular reinforced concrete beam section with the following details: Size: 230x450 mm overall with 25mm clear cover Concrete: M20 Steel: Fe415 Main reinforcement: 2-16# of Fe415 with centre of the bars at a distance of 35mm from compression edge of the section 3-16# of Fe415 with centre of the bars at a distance of 35mm from tension edge of the section Shear reinforcement: 2-8# @ 150mm c/c (2 legged 8mm dia. vertical stirrups made of Fe415) Let us determine the Limit State capacity of the section in bending and shear. Create a Python script named example02.py and type the following code in it. # File: example02.py from rcdesign.is456.stressblock import LSMStressBlock from rcdesign.is456.concrete import Concrete from rcdesign.is456.rebar import ( RebarHYSD, RebarLayer, RebarGroup, Stirrups, ShearRebarGroup, ) from rcdesign.is456.section import RectBeamSection sb = LSMStressBlock(\"IS456 LSM\") m20 = Concrete(\"M20\", 20) fe415 = RebarHYSD(\"Fe 415\", 415) t1 = RebarLayer(fe415, [16, 16], 35) t2 = RebarLayer(fe415, [16, 16, 16], -35) steel = RebarGroup([t1, t2]) sh_st = ShearRebarGroup([Stirrups(fe415, 2, 8, 150)]) sec = RectBeamSection(230, 450, sb, m20, steel, sh_st, 25) xu = sec.xu(0.0035) print(sec.report(xu, 0.0035)) Run the script from the command line: (env) $ python example02.py RECTANGULAR BEAM SECTION: 230 x 450 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FLEXURE ======= Equilibrium NA = 61.57 (k = 0.14) (ec_max = 0.003500) fck ec_max Type f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 20.00 0.00350000 C 8.93 102.41 3.68 -------------------------------------------------------------------------------- fy Bars xc Strain Type f_sc f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 415 2-16 35.00 0.00151034 C 295.04 8.40 115.26 3.06 415 3-16 415.00 -0.02009170 T -360.87 -217.67 76.93 -------------------------------------------------------------------------------- -102.41 79.99 ================= 0.00 83.68 SHEAR ===== Type tau_c Area (mm^2) V_uc (kN) --------------------------------------------------------------------------------- Concrete 0.52 95450.00 50.07 --------------------------------------------------------------------------------- Type Variant f_y Bars s_v A_sv V_us (kN) --------------------------------------------------------------------------------- Stirrups Vertical 415 2-8# 150.0 100.53 100.37 ======== 150.44 CAPACITY ======== Mu = 83.68 kNm Vu = 150.44 kN","title":"Doubly reinforced rectangular section"},{"location":"tutorial/#flanged-beam","text":"Consider a flanged reinforced concrete beam section with the following details: Web size: 300x475 mm overall with 25mm clear cover Flange size: Width=800 mm and depth = 150 mm Concrete: M25 Steel: Fe415 Main reinforcement: 2-18# of Fe415 with centre of the bars at a distance of 70 mm from tension edge of the section and 3-20# of Fe415 with centre of the bars at a distance of 35 mm from tension edge of the section Shear reinforcement: 2-8# @ 150mm c/c (2 legged 8mm dia. vertical stirrups made of Fe415) Let us determine the Limit State capacity of the section in bending and shear. Create a Python script named example03.py and type the following code in it. # File: example03.py from rcdesign.is456.stressblock import LSMStressBlock from rcdesign.is456.concrete import Concrete from rcdesign.is456.rebar import ( RebarHYSD, RebarLayer, RebarGroup, Stirrups, ShearRebarGroup, ) from rcdesign.is456.section import FlangedBeamSection sb = LSMStressBlock(\"IS456 LSM\") m25 = Concrete(\"M25\", 25) fe415 = RebarHYSD(\"Fe 415\", 415) t1 = RebarLayer(fe415, [20, 20, 20], -35) t2 = RebarLayer(fe415, [18, 18], -70) main_steel = RebarGroup([t1, t2]) shear_steel = ShearRebarGroup([Stirrups(fe415, 2, 8, 150)]) tsec = FlangedBeamSection(300, 475, 800, 150, sb, m25, main_steel, shear_steel, 25) xu = tsec.xu(0.0035) print(tsec.report(xu, 0.0035)) Run the example (env) $ python example03.py FLANGED BEAM SECTION - Web: 300 x 475, Flange: 800 x 150 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FLEXURE ======= Equilibrium NA = 72.43 (ec_max = 0.003500) fck Breadth Depth ec_min ec_max Type C (kN) M (kNm) -------------------------------------------------------------------------------- 25 300.00 475.00 0.00000000 0.00350000 C 196.41 8.31 25 800.00 150.00 0.00350000 C 327.36 13.85 -------------------------------------------------------------------------------- 523.77 22.16 fy Bars xc Strain Type f_sc f_cc C (kN) M (kNm) -------------------------------------------------------------------------------- 415 2-18 405.00 -0.01607150 T -360.87 -183.66 61.08 415 3-20 440.00 -0.01776287 T -360.87 -340.11 125.02 -------------------------------------------------------------------------------- -523.77 186.10 ================= 0.00 208.25 SHEAR ===== Type tau_c Area (mm^2) V_uc (kN) --------------------------------------------------------------------------------- Concrete 0.67 128318.18 86.14 --------------------------------------------------------------------------------- Type Variant f_y Bars s_v A_sv V_us (kN) --------------------------------------------------------------------------------- Stirrups Vertical 415 2-8# 150.0 100.53 103.45 ======== 189.58 CAPACITY ======== Mu = 208.25 kNm Vu = 189.58 kN","title":"Flanged Beam"},{"location":"tutorial/#rectangular-column","text":"Consider a rectangular reinforced concrete column section with the following details: Rectangular column of size: 230x450 mm Concrete: M20 Steel: Fe415 Longitudinal reinforcement: Fe415 in three layers: 3-16# at 50 mm from highly compressed edge 2-16# at 225 mm from highly compressed edge 3-16# at 400 mm from highly compressed edge (or 50 mm from the least compressed edge) Location of neutral axis: At 900 mm from highly compressed edge ($x_u=900$ and $k = \\frac{x_u}{D}=2.0$). Create a Python script named example04.py and type the following code in it. # File: example04.py from rcdesign.is456.concrete import Concrete from rcdesign.is456.stressblock import LSMStressBlock from rcdesign.is456.rebar import RebarHYSD, LateralTie, RebarLayer, RebarGroup from rcdesign.is456.section import RectColumnSection b = 230 D = 450 csb = LSMStressBlock(\"LSM Compression\") m20 = Concrete(\"M20\", 20) fe415 = RebarHYSD(\"Fe 415\", 415) L1 = RebarLayer(fe415, [16, 16, 16], 50) L2 = RebarLayer(fe415, [16, 16], D / 2) L3 = RebarLayer(fe415, [16, 16, 16], -50) long_st = RebarGroup([L1, L2, L3]) lat_ties = LateralTie(fe415, 8, 150) colsec = RectColumnSection(b, D, csb, m20, long_st, lat_ties, 35) xu = 900 k = xu / D # k = 2 / 3 print(colsec.report(xu)) Run the example. (env) $ python example04.py RECTANGULAR COLUMN 230 x 450 xu = 900.00 (k = 2.00) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Concrete: fck = 20.00 N/mm^2, fd = 8.93 N/mm^2 Clear Cover: 35 fck ecmin ecmax Type fsc1 fsc2 Cc Mc -------------------------------------------------------------------------------- 20.00 0.00127273 0.00254545 C 7.75 8.93 901.31 612.13 -------------------------------------------------------------------------------- fy Bars xc Strain Type fsc fcc C (kN) M (kNm) -------------------------------------------------------------------------------- 415 3-16 50.00 0.00240404 C 342.45 8.93 201.18 171.00 415 2-16 225.00 0.00190909 C 323.86 8.91 126.65 85.49 415 3-16 400.00 0.00141414 C 282.83 8.17 165.67 82.84 -------------------------------------------------------------------------------- 493.49 339.32 ================= 1394.81 951.45 CAPACITY ======== Pu = 1394.81 kN Mu = 951.45 kNm e = 682.14 mm","title":"Rectangular Column"},{"location":"theory/","text":"Theory \u00b6 Introduction \u00b6 Reinforced concrete is, along with steel, a widely used structural material in the construction of buildings, bridges and other such structures. The primary tasks for a structural engineer working with reinforced concrete are design and analysis. Design aims to proportion the section size and determine the reinforcement required to resist a given set of design forces. For a beam section, design foces constitute bending moment, shear force and torsional moment. For a column section, design forces constitute axial compression and bending moment about one or both major axes. Analysis involves determining the capacity of a given section with known dimensions and reinforcement details. For a beam section, capacity in bending and shear are computed. For a column section, the pair of axial compression and bending moment about one axis are computed. Be it design or analysis, it is first necessary to work at the section level and subsequntly carry out design or analysis of the entire structural element, such as a beam or a column. The design of a beam or a column can be treated as the design of a series of sections at critical locations. Similarly, analysis of a structural element, such as a beam or a column, requires the calculation of the capacity of sections at critical locations. Design and analysis complement each other. When we design, the intention is that the designed section must have a capacity equal to or greater than the imposed design forces. However, the actual capacity of the section after design is rarely computed and the over-strength of the designed section is usually not known. The analysis of a section results in the calculation of the capacity of the section. Comparing the capacity with the actual design forces that are known to act at the section help us in deciding whether the section is safe or unsafe and also in determining the strength ratio - the ratio of the capacity of the section to the design force imposed on the section. In this work, the task of analysis of a section is taken up first even though the more common task is that of design. That is because, analysis is more precise compared to design, which requires adjusting quantities upwards, such as the depth of the section (because it is preferred to provide dimensions that are practical for fabrication) or the number of reinforcement bars to be provided (because it is not possible to provide fraction of a bar). Moreover, analysis does not involve the task of detailing, such as ensuring the horizontal distance between bars is greater than the prescribed minimum, checking if the required number of reinforcement bars will fit within the breadth of the beam and adjusting them in multiple layers if they do not all fit in a single layer etc. This makes analysis simpler than design. The task of design can be broken down into determining the required section dimensions, reinforcement bars, satisfying detailing requirements and finally calculating the capacity of the section and computing the strength ratio. Thus, completing the task of analysis first aids the task of design. Software Design Materials Sections","title":"Introduction"},{"location":"theory/#theory","text":"","title":"Theory"},{"location":"theory/#introduction","text":"Reinforced concrete is, along with steel, a widely used structural material in the construction of buildings, bridges and other such structures. The primary tasks for a structural engineer working with reinforced concrete are design and analysis. Design aims to proportion the section size and determine the reinforcement required to resist a given set of design forces. For a beam section, design foces constitute bending moment, shear force and torsional moment. For a column section, design forces constitute axial compression and bending moment about one or both major axes. Analysis involves determining the capacity of a given section with known dimensions and reinforcement details. For a beam section, capacity in bending and shear are computed. For a column section, the pair of axial compression and bending moment about one axis are computed. Be it design or analysis, it is first necessary to work at the section level and subsequntly carry out design or analysis of the entire structural element, such as a beam or a column. The design of a beam or a column can be treated as the design of a series of sections at critical locations. Similarly, analysis of a structural element, such as a beam or a column, requires the calculation of the capacity of sections at critical locations. Design and analysis complement each other. When we design, the intention is that the designed section must have a capacity equal to or greater than the imposed design forces. However, the actual capacity of the section after design is rarely computed and the over-strength of the designed section is usually not known. The analysis of a section results in the calculation of the capacity of the section. Comparing the capacity with the actual design forces that are known to act at the section help us in deciding whether the section is safe or unsafe and also in determining the strength ratio - the ratio of the capacity of the section to the design force imposed on the section. In this work, the task of analysis of a section is taken up first even though the more common task is that of design. That is because, analysis is more precise compared to design, which requires adjusting quantities upwards, such as the depth of the section (because it is preferred to provide dimensions that are practical for fabrication) or the number of reinforcement bars to be provided (because it is not possible to provide fraction of a bar). Moreover, analysis does not involve the task of detailing, such as ensuring the horizontal distance between bars is greater than the prescribed minimum, checking if the required number of reinforcement bars will fit within the breadth of the beam and adjusting them in multiple layers if they do not all fit in a single layer etc. This makes analysis simpler than design. The task of design can be broken down into determining the required section dimensions, reinforcement bars, satisfying detailing requirements and finally calculating the capacity of the section and computing the strength ratio. Thus, completing the task of analysis first aids the task of design. Software Design Materials Sections","title":"Introduction"},{"location":"theory/materials/","text":"Materials \u00b6 The primary materials in reinforced concrete are: Concrete stress block Concrete Reinforcement bars Mild steel reinforcement bars with definite yield point High yield strength deformed bars with piece-wise linear stress-strain relation Concrete Stress Block \u00b6 Concrete stress block repesents the strain distribution and the stress-strain relation so as to be able to obtain strain and stress at a given location as well as obtain the area and first moment of area of the stress distribution which leads to calculation of axial compressive force and moment due to axial compressive force abouth the neutral axis for the case of rectangular sections. The attributes of a class to represent concrete stress block for limit state method of design are: 1. label : A string representing a label. It will be used as a label in output 2. ecy : Yield strain $\\epsilon_{cy}=0.002$, and 3. ecu : Ultimate strain $\\epsilon_{cu}=0.0035$ Similarly, a class to repesent the stress block for working stress method of design could be implemented later. Concrete \u00b6 The attributes of concrete that will be represented are: label : A string representing a label. It will be used as a label in output fck : Characteristic strength of concrete in $\\text{N/mm}^2$ gamma_m : Partial safety factor for material, which is specified in IS 456:2000 as 1.5 density : Density of concrete in $\\text{kN/m}^3$ Reinforcement Bars \u00b6 Rebar is an abstract class representing a steel bar used as longitudinal or shear reinforcement. Reinforcement bars can be of different types, such as mild steel bars and high yield strength deformed (HYSD) bars. Both of them have some common attributes but have significantly different stress-strain relationships. The common attributes that will be available in all child classes are: label : A string representing a label to refer to the type of reinforcement bar. fy : Characteristic strength $f_{y}$ of the bar. gamma_m : Partial safety factor for material, specifid by IS 456:2000 to be $\\gamma_m = 1.15$ for all types of reinforcement bars. density : Density of steel, usually taken to be 78.5 $\\text{kN/m}^3$. This will be used to calculate the weight of steel reinforcement. Es : Modulus of elasticity for steel, specifid by IS 456:2000 to be $E_s = 2 \\times 10^5$ for all types of reinforcement bars. Reinforcement bars are specified as having a linear stress-strain relationship up to a certain point and stress is assumed to remain constant beyond yield up to infinity. While no material is truly infinitely ductile, if the ductile portion is sufficiently long in relation so as to permit concrete to reach its ultimate strain, it would be justified to call it infinitely ductile. Mild Steel Reinforcement Bars \u00b6 Mild steel reinforcement bars, represented by the RebarMS class, are known to have a well defined yield point and therefore have a distinct bilinear stress-strain relationship. This class does not need any additonal attributes beyond what is already defined in the parent Rebar class. It differs from HYSD reinforcement bars only in the stress-strain relationship. The stress is linear up to the yield stress and after yield, the stress is constant. Yield stress is $\\frac{f_y}{\\gamma_m} = \\frac{f_y}{1.15} = 0.87 f_y$ and yield strain is $\\frac{1}{E_s} \\frac{f_y}{\\gamma_m} \\approx \\frac{0.87 f_y}{2 \\times 10^5}$. High Yield Strength Deformed Bars \u00b6 High Yield Strength Deformed (HYSD) reinforcement bars, repesented by the RebarHYSD class, have a higher yield strength as implied by their name and differ from mild steel bars in that they have a piece-wise linear stress-strain relationship. ReabHYSD is derived from the abstract Rebar class. As per the LSM of IS 456:2000, the stress-strain relation between the design stress of $0.8 \\frac{f_y}{\\gamma_m}$ and $\\frac{f_y}{\\gamma_m}$ is piece-wise linear and inelastic strain for each of the stress levels between 0.8 and 1.0 times $\\frac{f_y}{\\gamma_m}$, namely, 0.85, 0.9, 0.95 and 9.975 are specified as 0.0001, 0.0003, 0.0007, 0.001 and 0.002 respectively. From this information, it is possible to arrive at the complete stress-strain relation and determine the stress corresponding to a given strain. The additional information required is the table of inelastic strains for the different levels of design stress calculated based on the specified inelastic strain for different stress levels. Layers of Reinforcement Bars \u00b6 Reinforcement bars are placed in layers parallel to one of the principal axes of a section. The atrributes of a layer of reinforcement bars are: rebar : An object of type Rebar representing the type of reinforcement bar and its properties. Thus it is presumed that all bars in a layer are of the same type. dia : List of diameter of bars in the layer. It is assumed that all bars in a layer are of the same type. _dc : Distance of the centroid of the layer from one of the edged of the section. If the distance is positive, it is interpreted as the distance from the highly compressed edge. If the distance is negative, it is interpreted as the distance from the tension edge. This assumes that the section has an edge parallel to one of the principal axes. _xc : Distance of the centroid of the layer from the highly compressed edge. This value is calculated once the size of the section is known. It is not an input. stress_type : A string, 'C' if the layer is in compression and 'T' if it is tension. It is not an input, but will be decided during analysis of the section depending on where the layer is located with respect to the neutral axis. Groups of Layers of Reinforcement Bars \u00b6 Layers of reinforcement bars in a section are arranged in groups. For example, one layer near the compression edge and perhaps one or more near the tension edge. All layers are considered as part of a group of layers of reinforcement bars. Whether a particular layer of reinforcement bars within a group is subjected to tension or compression will only be known when the location of the neutral axis is computed. This is especially true of layers located close to the actual location of the neutral axis that is yet to be computed. Attributes of a group of reinforcement bars are: layers : List of objects of type RebarLayer . A group may have zero or more layers of reinforcement bars. Shear Reinforcement \u00b6 Concrete, without any tension reinforcement has an ability to resist shear. However, when the shear force on a section exceeds the shear capacity of concrete, it will be necessary to either increase the depth of the cross section, if that is an option, or to provide shear reinforcement to resist the additional shear beyond the capacity of concrete if depth cannot be increased. Shear reinforcement can be provided in one of several ways: Stirrups, either vertical or inclined. Single group of parallel bars bent-up at an angle at a single location. A series of groups of parallel bars bent-up at an angle at a regular spacing. While this is possible, it is not commonly used. However, there is an upper limit to the shear that can be resisted by a section with shear reinforcement. If the shear force on a section exceeds this limit, the only solution is to increase the depth of the cross section. The ShearReinforcement is an abstarct class. The attributes of shear reinforcement are: rebar : The type of reinforcement bars used as shear reinforcement. __Asv : Area of shear reinforcement. This is not an input data. It will be computed based on the type of reinforcement. _sv : Spacing of shear reinforcement. This is an input data and is common for all types of shear reinforcement. Vertical and Inclined Stirrups \u00b6 Reinforcement bars bent into the shape of a link and provided at regular spacing can be used to resist shear force at a section. The Stirrups class is a child class of ShearReinforcement . While vertical bars make an angle of 90 degrees with the longitudinal axis of a beam, inclined stirrups usually make an angle of 45 degrees. However, the angle of inclination can be other than 45 degrees. The shear resisted by a stirrup depends on the angle of the stirrup and increases as he angle approaches 90 degrees. The attributes of this type of shear reinforcement are: _nlegs : Number of legs of the stirrup. _bar_dia : Diameter of reinforcement bar used as stirrup. _alpha_deg : Angle in degree made by the stirrup with the longitudinal axis of the beam. It is 90 degree for vertical stirrups. Bent-up Bars \u00b6 A single group of parallel bent-up bars used as shear reinforcement are the longitudinal tension bars that are bent up, usually at 45 degrees. Not all tension bars at midspan are required at the ends of a simply supported beam where the bending moment is zero. In the case of a fixed or continuous beam, tension is at the top edge at the supports and bottom bars are not required, unless they are used as compression bars. In any case, some bottom bars at midspan can be used as bent-up bars to augment shear capacity or can be curtailed otherwise. It must be kept in mind that bent up bars are effective over a limited length of the beam. A series of groups of parallel bent-up bars act similar to inclined stirrups. If _sv is zero, the bent-up bars will be treated as a single group of bent-up bars and if _sv is non-zero, it will be treated as a series of groups of parallel bent-up bars. The attributes of bent-up bars as shear reinforcement, in addition to _sv , are: bars : List of diameters of bars that are bent-up. This can be subset of a layer of reinforcement that will be bent up. _alpha_deg : Angle in degrees made by the bent-up bars with the longitudinal axis of the beam. Group of Shear Reinforcements \u00b6 A section may be provided with more than one type of shear reinforcement. For example, if the design shear force is large resulting in very close spacing of vertical stirrups, a single group of parallel bent-up bars close to the section of maximum shear may help in increasing the spacing of vertical stirrups. Such an arrangement of shear reinforcement is represented by ShearRebarGroup , which is a list of one or more types of shear reinforcements. While it is theoretically possible to use any combination of shear reinforcement types, it is common to use vertical stirrups sometimes augmented by single group of bent-up bars. The only attribute of ShearRebarGroup is: shear_reinforcement , which is a list of one or more shear reinforcement types, such as vertical stirrups, inclined stirrups, single group of bent-up bars or a series of bent-up bars. LateralTie \u00b6 Lateral ties in columns help to confine concrete in a column section and play a critical role in enhacing ductility of column sections. They are not expected to carry any stress. The attributes of a lateral tie are: 1. rebar : Object of type Rebar repersenting the reinforcement bar used as the lateral tie 2. bar_dia : Diameter of the lateral tie 3. spacing : Spacing between lateral ties","title":"Material Class"},{"location":"theory/materials/#materials","text":"The primary materials in reinforced concrete are: Concrete stress block Concrete Reinforcement bars Mild steel reinforcement bars with definite yield point High yield strength deformed bars with piece-wise linear stress-strain relation","title":"Materials"},{"location":"theory/materials/#concrete-stress-block","text":"Concrete stress block repesents the strain distribution and the stress-strain relation so as to be able to obtain strain and stress at a given location as well as obtain the area and first moment of area of the stress distribution which leads to calculation of axial compressive force and moment due to axial compressive force abouth the neutral axis for the case of rectangular sections. The attributes of a class to represent concrete stress block for limit state method of design are: 1. label : A string representing a label. It will be used as a label in output 2. ecy : Yield strain $\\epsilon_{cy}=0.002$, and 3. ecu : Ultimate strain $\\epsilon_{cu}=0.0035$ Similarly, a class to repesent the stress block for working stress method of design could be implemented later.","title":"Concrete Stress Block"},{"location":"theory/materials/#concrete","text":"The attributes of concrete that will be represented are: label : A string representing a label. It will be used as a label in output fck : Characteristic strength of concrete in $\\text{N/mm}^2$ gamma_m : Partial safety factor for material, which is specified in IS 456:2000 as 1.5 density : Density of concrete in $\\text{kN/m}^3$","title":"Concrete"},{"location":"theory/materials/#reinforcement-bars","text":"Rebar is an abstract class representing a steel bar used as longitudinal or shear reinforcement. Reinforcement bars can be of different types, such as mild steel bars and high yield strength deformed (HYSD) bars. Both of them have some common attributes but have significantly different stress-strain relationships. The common attributes that will be available in all child classes are: label : A string representing a label to refer to the type of reinforcement bar. fy : Characteristic strength $f_{y}$ of the bar. gamma_m : Partial safety factor for material, specifid by IS 456:2000 to be $\\gamma_m = 1.15$ for all types of reinforcement bars. density : Density of steel, usually taken to be 78.5 $\\text{kN/m}^3$. This will be used to calculate the weight of steel reinforcement. Es : Modulus of elasticity for steel, specifid by IS 456:2000 to be $E_s = 2 \\times 10^5$ for all types of reinforcement bars. Reinforcement bars are specified as having a linear stress-strain relationship up to a certain point and stress is assumed to remain constant beyond yield up to infinity. While no material is truly infinitely ductile, if the ductile portion is sufficiently long in relation so as to permit concrete to reach its ultimate strain, it would be justified to call it infinitely ductile.","title":"Reinforcement Bars"},{"location":"theory/materials/#mild-steel-reinforcement-bars","text":"Mild steel reinforcement bars, represented by the RebarMS class, are known to have a well defined yield point and therefore have a distinct bilinear stress-strain relationship. This class does not need any additonal attributes beyond what is already defined in the parent Rebar class. It differs from HYSD reinforcement bars only in the stress-strain relationship. The stress is linear up to the yield stress and after yield, the stress is constant. Yield stress is $\\frac{f_y}{\\gamma_m} = \\frac{f_y}{1.15} = 0.87 f_y$ and yield strain is $\\frac{1}{E_s} \\frac{f_y}{\\gamma_m} \\approx \\frac{0.87 f_y}{2 \\times 10^5}$.","title":"Mild Steel Reinforcement Bars"},{"location":"theory/materials/#high-yield-strength-deformed-bars","text":"High Yield Strength Deformed (HYSD) reinforcement bars, repesented by the RebarHYSD class, have a higher yield strength as implied by their name and differ from mild steel bars in that they have a piece-wise linear stress-strain relationship. ReabHYSD is derived from the abstract Rebar class. As per the LSM of IS 456:2000, the stress-strain relation between the design stress of $0.8 \\frac{f_y}{\\gamma_m}$ and $\\frac{f_y}{\\gamma_m}$ is piece-wise linear and inelastic strain for each of the stress levels between 0.8 and 1.0 times $\\frac{f_y}{\\gamma_m}$, namely, 0.85, 0.9, 0.95 and 9.975 are specified as 0.0001, 0.0003, 0.0007, 0.001 and 0.002 respectively. From this information, it is possible to arrive at the complete stress-strain relation and determine the stress corresponding to a given strain. The additional information required is the table of inelastic strains for the different levels of design stress calculated based on the specified inelastic strain for different stress levels.","title":"High Yield Strength Deformed Bars"},{"location":"theory/materials/#layers-of-reinforcement-bars","text":"Reinforcement bars are placed in layers parallel to one of the principal axes of a section. The atrributes of a layer of reinforcement bars are: rebar : An object of type Rebar representing the type of reinforcement bar and its properties. Thus it is presumed that all bars in a layer are of the same type. dia : List of diameter of bars in the layer. It is assumed that all bars in a layer are of the same type. _dc : Distance of the centroid of the layer from one of the edged of the section. If the distance is positive, it is interpreted as the distance from the highly compressed edge. If the distance is negative, it is interpreted as the distance from the tension edge. This assumes that the section has an edge parallel to one of the principal axes. _xc : Distance of the centroid of the layer from the highly compressed edge. This value is calculated once the size of the section is known. It is not an input. stress_type : A string, 'C' if the layer is in compression and 'T' if it is tension. It is not an input, but will be decided during analysis of the section depending on where the layer is located with respect to the neutral axis.","title":"Layers of Reinforcement Bars"},{"location":"theory/materials/#groups-of-layers-of-reinforcement-bars","text":"Layers of reinforcement bars in a section are arranged in groups. For example, one layer near the compression edge and perhaps one or more near the tension edge. All layers are considered as part of a group of layers of reinforcement bars. Whether a particular layer of reinforcement bars within a group is subjected to tension or compression will only be known when the location of the neutral axis is computed. This is especially true of layers located close to the actual location of the neutral axis that is yet to be computed. Attributes of a group of reinforcement bars are: layers : List of objects of type RebarLayer . A group may have zero or more layers of reinforcement bars.","title":"Groups of Layers of Reinforcement Bars"},{"location":"theory/materials/#shear-reinforcement","text":"Concrete, without any tension reinforcement has an ability to resist shear. However, when the shear force on a section exceeds the shear capacity of concrete, it will be necessary to either increase the depth of the cross section, if that is an option, or to provide shear reinforcement to resist the additional shear beyond the capacity of concrete if depth cannot be increased. Shear reinforcement can be provided in one of several ways: Stirrups, either vertical or inclined. Single group of parallel bars bent-up at an angle at a single location. A series of groups of parallel bars bent-up at an angle at a regular spacing. While this is possible, it is not commonly used. However, there is an upper limit to the shear that can be resisted by a section with shear reinforcement. If the shear force on a section exceeds this limit, the only solution is to increase the depth of the cross section. The ShearReinforcement is an abstarct class. The attributes of shear reinforcement are: rebar : The type of reinforcement bars used as shear reinforcement. __Asv : Area of shear reinforcement. This is not an input data. It will be computed based on the type of reinforcement. _sv : Spacing of shear reinforcement. This is an input data and is common for all types of shear reinforcement.","title":"Shear Reinforcement"},{"location":"theory/materials/#vertical-and-inclined-stirrups","text":"Reinforcement bars bent into the shape of a link and provided at regular spacing can be used to resist shear force at a section. The Stirrups class is a child class of ShearReinforcement . While vertical bars make an angle of 90 degrees with the longitudinal axis of a beam, inclined stirrups usually make an angle of 45 degrees. However, the angle of inclination can be other than 45 degrees. The shear resisted by a stirrup depends on the angle of the stirrup and increases as he angle approaches 90 degrees. The attributes of this type of shear reinforcement are: _nlegs : Number of legs of the stirrup. _bar_dia : Diameter of reinforcement bar used as stirrup. _alpha_deg : Angle in degree made by the stirrup with the longitudinal axis of the beam. It is 90 degree for vertical stirrups.","title":"Vertical and Inclined Stirrups"},{"location":"theory/materials/#bent-up-bars","text":"A single group of parallel bent-up bars used as shear reinforcement are the longitudinal tension bars that are bent up, usually at 45 degrees. Not all tension bars at midspan are required at the ends of a simply supported beam where the bending moment is zero. In the case of a fixed or continuous beam, tension is at the top edge at the supports and bottom bars are not required, unless they are used as compression bars. In any case, some bottom bars at midspan can be used as bent-up bars to augment shear capacity or can be curtailed otherwise. It must be kept in mind that bent up bars are effective over a limited length of the beam. A series of groups of parallel bent-up bars act similar to inclined stirrups. If _sv is zero, the bent-up bars will be treated as a single group of bent-up bars and if _sv is non-zero, it will be treated as a series of groups of parallel bent-up bars. The attributes of bent-up bars as shear reinforcement, in addition to _sv , are: bars : List of diameters of bars that are bent-up. This can be subset of a layer of reinforcement that will be bent up. _alpha_deg : Angle in degrees made by the bent-up bars with the longitudinal axis of the beam.","title":"Bent-up Bars"},{"location":"theory/materials/#group-of-shear-reinforcements","text":"A section may be provided with more than one type of shear reinforcement. For example, if the design shear force is large resulting in very close spacing of vertical stirrups, a single group of parallel bent-up bars close to the section of maximum shear may help in increasing the spacing of vertical stirrups. Such an arrangement of shear reinforcement is represented by ShearRebarGroup , which is a list of one or more types of shear reinforcements. While it is theoretically possible to use any combination of shear reinforcement types, it is common to use vertical stirrups sometimes augmented by single group of bent-up bars. The only attribute of ShearRebarGroup is: shear_reinforcement , which is a list of one or more shear reinforcement types, such as vertical stirrups, inclined stirrups, single group of bent-up bars or a series of bent-up bars.","title":"Group of Shear Reinforcements"},{"location":"theory/materials/#lateraltie","text":"Lateral ties in columns help to confine concrete in a column section and play a critical role in enhacing ductility of column sections. They are not expected to carry any stress. The attributes of a lateral tie are: 1. rebar : Object of type Rebar repersenting the reinforcement bar used as the lateral tie 2. bar_dia : Diameter of the lateral tie 3. spacing : Spacing between lateral ties","title":"LateralTie"},{"location":"theory/section/","text":"Sections \u00b6 Reinforced concrete structures are made of reinforced concrete structural members. They can be broadly classified into: Beams which are predominantly subjected to bending, shear and torsion, and Columns which are predominantly subjected to axial compression, possibly with an accompanying bending moment. Strctural members where both bending and axial compression forces are equally dominant are called beam-columns. Analysis and design of beams is simpler because bending and shear behaviours can be treated independently. Analysis and design of sections subjected only to axial compression is also simple. Analysis of sections subjected to axial compression and bending about one axis is a coupled problem. That is, for a given section, materials, reinforcement, and chosen location of neutral axis, there is a unique pair of axial compression $P_u$ and bending $M_u$ about one axis. But changing the location of the neutral axis results in a different combination of $P_u$ and $M_u$. Design of such sections is carried out as an inverse step of carrying out a large number of analyses and choosing the combination nearest to the given design forces. Usual practice is to construct interaction diagrams for different amounts of longitudinal reinforcement and plotting an interaction diagram for each value of area of longitudinal reinforcement. Beam Sections \u00b6 A beam section can have any shape but from the point of view of ease of fabrication and aesthetics, rectangular beam section is the most common. The attributes, required to repesent a section irrespective of whether it belongs to a beam or a column, are listed below: csb : Object of type concrete stress block repesenting strain distribution and stress stran relation for flexure. conc : Object of type Concrete . There must only be one object of this type associated with a given section. long_steel : Object of type RebarGroup representing the longitudinal reinforcement provided along the length of the structural member. There must only be one object of this type associated with a given section. shear_steel : A list of objects of type ShearRebarGroup , consisting of zero or more of vertical or inclined stirrups, or bent-up bars. clear_cover : Clear cover to reinforcement bars. Effective section of a beam can be rectangular or flanged. Since reinforced concrete slab is cast together with beams, the effective shape of the section is: 1. A flanged section when the slab happens to be in the compression zone, or 2. Rectangular when the slab happens to be in the tension zone. A flanged section can be a T section with the flange extending on both sides of the web (as in the case of an intermediate beam) or an L section with the flange extending on only one side (as in the case of an end beam). Typically, mid-span section (with the beam subjected to gravity loads) is subjected to sagging bending moment and the slab is in the compression zone resulting in a flanged section. But under the same loading direction, end sections are subjected to hogging bending moment and the slab is in the tension zone resulting in a rectangular section. Based on the bending moment distribution and the location of the given section, a section can be categorized as rectangular or flanged. Rectangular Beam Sections \u00b6 The RectBeamSection class represents a beam section, and it is expected to be subjected to bending, shear and torsion. Additional attributes of a RectBeamSection are: 1. b : Breadth of the beam, in mm 2. D : Overall depth of the beam, in mm 3. long_steel : Object of type RebarGroup , representing longitudinal reinforcement bars. The group of reinforcement bars, in turn, may consist of one or more layers of reinforcement bars, placed parallel to the edge of size b . 3. shear_steel : Object of type ShearRebarGroup , containing a list of one or more shear reinforcement types. Flanged Beam Sections \u00b6 The FlagnedBeamSection is a child class of RectBeamSection and has all its atributes and many of its behaviours. Additional attributes of a FlangedBeamSection , in addition to those already defined in the parent class RectBeamSection are: bf : Breadth of the flange, in mm Df : Depth of the flange, in mm Column Sections \u00b6 At present, only rectangular column sections have been implemented. Rectangular Beam Sections \u00b6 The RectColumnSection is a class with the following attributes: 1. b : Breadth of the column, in mm 2. D : Depth of the column, in mm 3. long_steel : Object of type RebarGroup , with one or more layers of reinforcement bars, placed parallel to the edge of size b . 4. LateralTie : Object of type LateralTie","title":"Section Classs"},{"location":"theory/section/#sections","text":"Reinforced concrete structures are made of reinforced concrete structural members. They can be broadly classified into: Beams which are predominantly subjected to bending, shear and torsion, and Columns which are predominantly subjected to axial compression, possibly with an accompanying bending moment. Strctural members where both bending and axial compression forces are equally dominant are called beam-columns. Analysis and design of beams is simpler because bending and shear behaviours can be treated independently. Analysis and design of sections subjected only to axial compression is also simple. Analysis of sections subjected to axial compression and bending about one axis is a coupled problem. That is, for a given section, materials, reinforcement, and chosen location of neutral axis, there is a unique pair of axial compression $P_u$ and bending $M_u$ about one axis. But changing the location of the neutral axis results in a different combination of $P_u$ and $M_u$. Design of such sections is carried out as an inverse step of carrying out a large number of analyses and choosing the combination nearest to the given design forces. Usual practice is to construct interaction diagrams for different amounts of longitudinal reinforcement and plotting an interaction diagram for each value of area of longitudinal reinforcement.","title":"Sections"},{"location":"theory/section/#beam-sections","text":"A beam section can have any shape but from the point of view of ease of fabrication and aesthetics, rectangular beam section is the most common. The attributes, required to repesent a section irrespective of whether it belongs to a beam or a column, are listed below: csb : Object of type concrete stress block repesenting strain distribution and stress stran relation for flexure. conc : Object of type Concrete . There must only be one object of this type associated with a given section. long_steel : Object of type RebarGroup representing the longitudinal reinforcement provided along the length of the structural member. There must only be one object of this type associated with a given section. shear_steel : A list of objects of type ShearRebarGroup , consisting of zero or more of vertical or inclined stirrups, or bent-up bars. clear_cover : Clear cover to reinforcement bars. Effective section of a beam can be rectangular or flanged. Since reinforced concrete slab is cast together with beams, the effective shape of the section is: 1. A flanged section when the slab happens to be in the compression zone, or 2. Rectangular when the slab happens to be in the tension zone. A flanged section can be a T section with the flange extending on both sides of the web (as in the case of an intermediate beam) or an L section with the flange extending on only one side (as in the case of an end beam). Typically, mid-span section (with the beam subjected to gravity loads) is subjected to sagging bending moment and the slab is in the compression zone resulting in a flanged section. But under the same loading direction, end sections are subjected to hogging bending moment and the slab is in the tension zone resulting in a rectangular section. Based on the bending moment distribution and the location of the given section, a section can be categorized as rectangular or flanged.","title":"Beam Sections"},{"location":"theory/section/#rectangular-beam-sections","text":"The RectBeamSection class represents a beam section, and it is expected to be subjected to bending, shear and torsion. Additional attributes of a RectBeamSection are: 1. b : Breadth of the beam, in mm 2. D : Overall depth of the beam, in mm 3. long_steel : Object of type RebarGroup , representing longitudinal reinforcement bars. The group of reinforcement bars, in turn, may consist of one or more layers of reinforcement bars, placed parallel to the edge of size b . 3. shear_steel : Object of type ShearRebarGroup , containing a list of one or more shear reinforcement types.","title":"Rectangular Beam Sections"},{"location":"theory/section/#flanged-beam-sections","text":"The FlagnedBeamSection is a child class of RectBeamSection and has all its atributes and many of its behaviours. Additional attributes of a FlangedBeamSection , in addition to those already defined in the parent class RectBeamSection are: bf : Breadth of the flange, in mm Df : Depth of the flange, in mm","title":"Flanged Beam Sections"},{"location":"theory/section/#column-sections","text":"At present, only rectangular column sections have been implemented.","title":"Column Sections"},{"location":"theory/section/#rectangular-beam-sections_1","text":"The RectColumnSection is a class with the following attributes: 1. b : Breadth of the column, in mm 2. D : Depth of the column, in mm 3. long_steel : Object of type RebarGroup , with one or more layers of reinforcement bars, placed parallel to the edge of size b . 4. LateralTie : Object of type LateralTie","title":"Rectangular Beam Sections"},{"location":"theory/software_design/","text":"Software Design \u00b6 This project has adopted the Object Oriented Programming (OOP) approach to design and implement a set of classes and class hierarchies to represent the important components of reinforced concrete sections and structural elements. This approach is well suited to the problem at hand for several reasons: The concepts of data encapsulation is very helpful since each entity has several attributes and passing an object of a specific class automatically carries its state in a single object. This greatly reduces the number of arguments that would have to be passed to functions if it were to be implemented using the procedural programming paradigm. The concept of abstract classes and inheritance repesents the relation between entities such as a rectangular beam section and a flanged beam section which are concrete types of the abstract class representing a section. Similar relation exists between mild steel reinforcement bar and HYSD bar which are concrete classes of the abstract class representing a reinforcement bar. Similarly, vertical stirrups, inclined stirrups and bent-up bars are concrete classes of the abstract class representing shear reinforcement. The concept of composition, where a class is a synthesis of several components directly represents a class such as a section that consists of concrete, main reinforcement bars and shear reinforcement bars, in addition to the attributes of a section such as its dimensions. This package therefore consist of several abstract and concrete classes, at present, to represent the following: Concrete stress block Concrete Reinforcement bars - Mild steel reinforcement bars and HYSD reinforcement bars Reinforcement concrete section, Rectangular beam section, flanged beam section and rectangular column section Since it is decided to begin with analysis, the methods that are being implemented at present will aim to determine the limit state capacity of the different sections, such as $M_u$ and $V_u$ for beam sections and $P_u$ and $M_u$ for column sections, given the exact dimensions, material and reinforcement details. Classes \u00b6 The following classes have been implemented: A class LSMStressBlock to represent the stress block for concrete in compression under limit state of flexure, as well as limit state of combined axial compression and flexure as per IS 456:2000. A class Concrete to represent concrete. An abstract class Rebar to represent reinforcement bars. Two derived classes RebarMS and RebarHYSD to represent mild steel bars and high yield strength deformed bars, respectively. A class RebarLayer to represent a single layer of reinforcement bars, defined as a list of bar diameters and the distance of the centre of the bars from the nearest edge. A class RebarGroup to represnt a list of layers of reinforcement bars. An abstract class ShearReinforcement to represent shear reinforcement. Two derived classes Stirrups and BentupBars to represent vertical/inclined stirrups and bent up bars, respectively. A class ShearRebarGroup to represent a group of shear reinforcement bars. A class RectBeamSection to represnt a reinforced concrete rectangular beam section. A derived class FlangedBeamSection to represnt flanged sections subejcted to flexure and shear, derived from RectBeamSection . A class RectColumnSection * to represent a reinforced concrete rectangular coulmn section subjected to combined axial compression and bending about one axis. Methods \u00b6 Following funcationality has been implemented for the different classes: LSMStressBlock : Calculation of the following: strain distribution, stress for a given strain, stress at a specified distance $x$ from neutral axis, area of stress distribution between two locations $x_1$ and $x_2$ from neutral axis, and moment of stress block between the two locations with respect to depth $x_u$ of the neutral axis. These are implemented for both the following cases: Flexure Combined axial compression and bending about one axis. Concrete : Calculation of design stress $f_d$, shear stress $\\tau_c$ and maximum shear stress $\\tau_{c,max}$. RebarMS and RebarHYSD : Stress for a specified value of strain and design stress. RebarLayer : Area of bars in a layer. RebarGroup : Calculation of the sum of the following values aggregated after calculating the values individually for each layer: Area of reinforcing bars in the group, Force in reinforcing bars in the group, in tension and in compression, Moment of force in reinforcing bars in the group about the neutral axis, in tension and in compression RectBeamSection and FlangedBeamSection : Calculation of: Total compression force and the corresponding moment about the neutral axis for a specified neutral axis location $x_u$, considering concrete in compression and compression reinforcement bars, if present, Total tension force and the corresponding moment about the neutral axis due to a group of tension reinforcement bars, Position of the neutral axis $x_u$, calculated iteratively to satisfy equilibrium, Shear force capacity of a section for a given shear reinforcement in the form of vertical or inclined stirrups, Spacing of vertical or inclined stirrups for a given design shear force RectColumnSection : Calculation of: Total axial compression force and bending moment about the neutral axis for a given position of the neutral axis.","title":"Software Design"},{"location":"theory/software_design/#software-design","text":"This project has adopted the Object Oriented Programming (OOP) approach to design and implement a set of classes and class hierarchies to represent the important components of reinforced concrete sections and structural elements. This approach is well suited to the problem at hand for several reasons: The concepts of data encapsulation is very helpful since each entity has several attributes and passing an object of a specific class automatically carries its state in a single object. This greatly reduces the number of arguments that would have to be passed to functions if it were to be implemented using the procedural programming paradigm. The concept of abstract classes and inheritance repesents the relation between entities such as a rectangular beam section and a flanged beam section which are concrete types of the abstract class representing a section. Similar relation exists between mild steel reinforcement bar and HYSD bar which are concrete classes of the abstract class representing a reinforcement bar. Similarly, vertical stirrups, inclined stirrups and bent-up bars are concrete classes of the abstract class representing shear reinforcement. The concept of composition, where a class is a synthesis of several components directly represents a class such as a section that consists of concrete, main reinforcement bars and shear reinforcement bars, in addition to the attributes of a section such as its dimensions. This package therefore consist of several abstract and concrete classes, at present, to represent the following: Concrete stress block Concrete Reinforcement bars - Mild steel reinforcement bars and HYSD reinforcement bars Reinforcement concrete section, Rectangular beam section, flanged beam section and rectangular column section Since it is decided to begin with analysis, the methods that are being implemented at present will aim to determine the limit state capacity of the different sections, such as $M_u$ and $V_u$ for beam sections and $P_u$ and $M_u$ for column sections, given the exact dimensions, material and reinforcement details.","title":"Software Design"},{"location":"theory/software_design/#classes","text":"The following classes have been implemented: A class LSMStressBlock to represent the stress block for concrete in compression under limit state of flexure, as well as limit state of combined axial compression and flexure as per IS 456:2000. A class Concrete to represent concrete. An abstract class Rebar to represent reinforcement bars. Two derived classes RebarMS and RebarHYSD to represent mild steel bars and high yield strength deformed bars, respectively. A class RebarLayer to represent a single layer of reinforcement bars, defined as a list of bar diameters and the distance of the centre of the bars from the nearest edge. A class RebarGroup to represnt a list of layers of reinforcement bars. An abstract class ShearReinforcement to represent shear reinforcement. Two derived classes Stirrups and BentupBars to represent vertical/inclined stirrups and bent up bars, respectively. A class ShearRebarGroup to represent a group of shear reinforcement bars. A class RectBeamSection to represnt a reinforced concrete rectangular beam section. A derived class FlangedBeamSection to represnt flanged sections subejcted to flexure and shear, derived from RectBeamSection . A class RectColumnSection * to represent a reinforced concrete rectangular coulmn section subjected to combined axial compression and bending about one axis.","title":"Classes"},{"location":"theory/software_design/#methods","text":"Following funcationality has been implemented for the different classes: LSMStressBlock : Calculation of the following: strain distribution, stress for a given strain, stress at a specified distance $x$ from neutral axis, area of stress distribution between two locations $x_1$ and $x_2$ from neutral axis, and moment of stress block between the two locations with respect to depth $x_u$ of the neutral axis. These are implemented for both the following cases: Flexure Combined axial compression and bending about one axis. Concrete : Calculation of design stress $f_d$, shear stress $\\tau_c$ and maximum shear stress $\\tau_{c,max}$. RebarMS and RebarHYSD : Stress for a specified value of strain and design stress. RebarLayer : Area of bars in a layer. RebarGroup : Calculation of the sum of the following values aggregated after calculating the values individually for each layer: Area of reinforcing bars in the group, Force in reinforcing bars in the group, in tension and in compression, Moment of force in reinforcing bars in the group about the neutral axis, in tension and in compression RectBeamSection and FlangedBeamSection : Calculation of: Total compression force and the corresponding moment about the neutral axis for a specified neutral axis location $x_u$, considering concrete in compression and compression reinforcement bars, if present, Total tension force and the corresponding moment about the neutral axis due to a group of tension reinforcement bars, Position of the neutral axis $x_u$, calculated iteratively to satisfy equilibrium, Shear force capacity of a section for a given shear reinforcement in the form of vertical or inclined stirrups, Spacing of vertical or inclined stirrups for a given design shear force RectColumnSection : Calculation of: Total axial compression force and bending moment about the neutral axis for a given position of the neutral axis.","title":"Methods"}]}